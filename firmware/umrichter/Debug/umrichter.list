
umrichter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b4  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000fa10  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08012e48  08012e48  00022e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08012e4c  08012e4c  00022e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08012e50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005a8  20000074  08012ec4  00030074  2**2
                  ALLOC
  7 ._user_heap_stack 00001404  2000061c  08012ec4  0003061c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a1f4  00000000  00000000  0003009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018d2  00000000  00000000  0003a291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000920  00000000  00000000  0003bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000858  00000000  00000000  0003c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00010f19  00000000  00000000  0003cce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000088c4  00000000  00000000  0004dbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0005cb65  00000000  00000000  000564bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  000b3022  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028dc  00000000  00000000  000b3078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000074 	.word	0x20000074
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003420 	.word	0x08003420

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000078 	.word	0x20000078
 80001c0:	08003420 	.word	0x08003420

080001c4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001cc:	2300      	movs	r3, #0
 80001ce:	73fb      	strb	r3, [r7, #15]
 80001d0:	2300      	movs	r3, #0
 80001d2:	73bb      	strb	r3, [r7, #14]
 80001d4:	230f      	movs	r3, #15
 80001d6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	78db      	ldrb	r3, [r3, #3]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d039      	beq.n	8000254 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e0:	4b27      	ldr	r3, [pc, #156]	; (8000280 <NVIC_Init+0xbc>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	43db      	mvns	r3, r3
 80001e6:	0a1b      	lsrs	r3, r3, #8
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	f003 0307 	and.w	r3, r3, #7
 80001ee:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f0:	7bfb      	ldrb	r3, [r7, #15]
 80001f2:	f1c3 0304 	rsb	r3, r3, #4
 80001f6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001f8:	7b7a      	ldrb	r2, [r7, #13]
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	fa42 f303 	asr.w	r3, r2, r3
 8000200:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	785b      	ldrb	r3, [r3, #1]
 8000206:	461a      	mov	r2, r3
 8000208:	7bbb      	ldrb	r3, [r7, #14]
 800020a:	fa02 f303 	lsl.w	r3, r2, r3
 800020e:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	789a      	ldrb	r2, [r3, #2]
 8000214:	7b7b      	ldrb	r3, [r7, #13]
 8000216:	4013      	ands	r3, r2
 8000218:	b2da      	uxtb	r2, r3
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	4313      	orrs	r3, r2
 800021e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000220:	7bfb      	ldrb	r3, [r7, #15]
 8000222:	011b      	lsls	r3, r3, #4
 8000224:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000226:	4a17      	ldr	r2, [pc, #92]	; (8000284 <NVIC_Init+0xc0>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	4413      	add	r3, r2
 800022e:	7bfa      	ldrb	r2, [r7, #15]
 8000230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800023c:	4911      	ldr	r1, [pc, #68]	; (8000284 <NVIC_Init+0xc0>)
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	7812      	ldrb	r2, [r2, #0]
 8000242:	0952      	lsrs	r2, r2, #5
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000248:	2201      	movs	r2, #1
 800024a:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800024e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000252:	e00f      	b.n	8000274 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025c:	4909      	ldr	r1, [pc, #36]	; (8000284 <NVIC_Init+0xc0>)
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	7812      	ldrb	r2, [r2, #0]
 8000262:	0952      	lsrs	r2, r2, #5
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000268:	2201      	movs	r2, #1
 800026a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026c:	f100 0320 	add.w	r3, r0, #32
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000274:	bf00      	nop
 8000276:	3714      	adds	r7, #20
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	e000ed00 	.word	0xe000ed00
 8000284:	e000e100 	.word	0xe000e100

08000288 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b04      	cmp	r3, #4
 8000294:	d106      	bne.n	80002a4 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <SysTick_CLKSourceConfig+0x34>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a08      	ldr	r2, [pc, #32]	; (80002bc <SysTick_CLKSourceConfig+0x34>)
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 80002a2:	e005      	b.n	80002b0 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <SysTick_CLKSourceConfig+0x34>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <SysTick_CLKSourceConfig+0x34>)
 80002aa:	f023 0304 	bic.w	r3, r3, #4
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000e010 	.word	0xe000e010

080002c0 <FLASH_SetLatency>:
  *            @arg FLASH_Latency_6: FLASH Six Latency cycles
  *            @arg FLASH_Latency_7: FLASH Seven Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <FLASH_SetLatency+0x1c>)
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40023c00 	.word	0x40023c00

080002e0 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d006      	beq.n	80002fe <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <FLASH_PrefetchBufferCmd+0x34>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a07      	ldr	r2, [pc, #28]	; (8000314 <FLASH_PrefetchBufferCmd+0x34>)
 80002f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002fa:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 80002fc:	e005      	b.n	800030a <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <FLASH_PrefetchBufferCmd+0x34>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <FLASH_PrefetchBufferCmd+0x34>)
 8000304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000308:	6013      	str	r3, [r2, #0]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40023c00 	.word	0x40023c00

08000318 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d006      	beq.n	8000336 <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <FLASH_InstructionCacheCmd+0x34>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a07      	ldr	r2, [pc, #28]	; (800034c <FLASH_InstructionCacheCmd+0x34>)
 800032e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000332:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
  }
}
 8000334:	e005      	b.n	8000342 <FLASH_InstructionCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <FLASH_InstructionCacheCmd+0x34>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a04      	ldr	r2, [pc, #16]	; (800034c <FLASH_InstructionCacheCmd+0x34>)
 800033c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000340:	6013      	str	r3, [r2, #0]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40023c00 	.word	0x40023c00

08000350 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d006      	beq.n	800036e <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <FLASH_DataCacheCmd+0x34>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a07      	ldr	r2, [pc, #28]	; (8000384 <FLASH_DataCacheCmd+0x34>)
 8000366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800036a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
  }
}
 800036c:	e005      	b.n	800037a <FLASH_DataCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <FLASH_DataCacheCmd+0x34>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a04      	ldr	r2, [pc, #16]	; (8000384 <FLASH_DataCacheCmd+0x34>)
 8000374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000378:	6013      	str	r3, [r2, #0]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40023c00 	.word	0x40023c00

08000388 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000388:	b480      	push	{r7}
 800038a:	b087      	sub	sp, #28
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
 80003a2:	e076      	b.n	8000492 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003a4:	2201      	movs	r2, #1
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ac:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	693a      	ldr	r2, [r7, #16]
 80003b4:	4013      	ands	r3, r2
 80003b6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d165      	bne.n	800048c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	2103      	movs	r1, #3
 80003ca:	fa01 f303 	lsl.w	r3, r1, r3
 80003ce:	43db      	mvns	r3, r3
 80003d0:	401a      	ands	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	4619      	mov	r1, r3
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	fa01 f303 	lsl.w	r3, r1, r3
 80003e8:	431a      	orrs	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d003      	beq.n	80003fe <GPIO_Init+0x76>
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	791b      	ldrb	r3, [r3, #4]
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d12e      	bne.n	800045c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	689a      	ldr	r2, [r3, #8]
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	401a      	ands	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	689a      	ldr	r2, [r3, #8]
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	4619      	mov	r1, r3
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	fa01 f303 	lsl.w	r3, r1, r3
 8000426:	431a      	orrs	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	685a      	ldr	r2, [r3, #4]
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	b29b      	uxth	r3, r3
 8000434:	4619      	mov	r1, r3
 8000436:	2301      	movs	r3, #1
 8000438:	408b      	lsls	r3, r1
 800043a:	43db      	mvns	r3, r3
 800043c:	401a      	ands	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	683a      	ldr	r2, [r7, #0]
 8000448:	7992      	ldrb	r2, [r2, #6]
 800044a:	4611      	mov	r1, r2
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	b292      	uxth	r2, r2
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	b292      	uxth	r2, r2
 8000456:	431a      	orrs	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68da      	ldr	r2, [r3, #12]
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	b29b      	uxth	r3, r3
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	2103      	movs	r1, #3
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	401a      	ands	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	68da      	ldr	r2, [r3, #12]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	79db      	ldrb	r3, [r3, #7]
 800047c:	4619      	mov	r1, r3
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	431a      	orrs	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	3301      	adds	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	2b0f      	cmp	r3, #15
 8000496:	d985      	bls.n	80003a4 <GPIO_Init+0x1c>
    }
  }
}
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	371c      	adds	r7, #28
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	807b      	strh	r3, [r7, #2]
 80004b0:	4613      	mov	r3, r2
 80004b2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004bc:	787a      	ldrb	r2, [r7, #1]
 80004be:	887b      	ldrh	r3, [r7, #2]
 80004c0:	f003 0307 	and.w	r3, r3, #7
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ca:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004cc:	887b      	ldrh	r3, [r7, #2]
 80004ce:	08db      	lsrs	r3, r3, #3
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3208      	adds	r2, #8
 80004d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004dc:	887b      	ldrh	r3, [r7, #2]
 80004de:	f003 0307 	and.w	r3, r3, #7
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	210f      	movs	r1, #15
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	43db      	mvns	r3, r3
 80004ec:	8879      	ldrh	r1, [r7, #2]
 80004ee:	08c9      	lsrs	r1, r1, #3
 80004f0:	b289      	uxth	r1, r1
 80004f2:	4608      	mov	r0, r1
 80004f4:	ea02 0103 	and.w	r1, r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f100 0208 	add.w	r2, r0, #8
 80004fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000502:	887b      	ldrh	r3, [r7, #2]
 8000504:	08db      	lsrs	r3, r3, #3
 8000506:	b29b      	uxth	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3208      	adds	r2, #8
 800050e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	4313      	orrs	r3, r2
 8000516:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000518:	887b      	ldrh	r3, [r7, #2]
 800051a:	08db      	lsrs	r3, r3, #3
 800051c:	b29b      	uxth	r3, r3
 800051e:	461a      	mov	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3208      	adds	r2, #8
 8000524:	68b9      	ldr	r1, [r7, #8]
 8000526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <RCC_HSEConfig+0x20>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <RCC_HSEConfig+0x20>)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	7013      	strb	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40023802 	.word	0x40023802

08000558 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
 8000564:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	019a      	lsls	r2, r3, #6
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	431a      	orrs	r2, r3
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	085b      	lsrs	r3, r3, #1
 8000572:	3b01      	subs	r3, #1
 8000574:	041b      	lsls	r3, r3, #16
 8000576:	431a      	orrs	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000580:	4903      	ldr	r1, [pc, #12]	; (8000590 <RCC_PLLConfig+0x38>)
 8000582:	4313      	orrs	r3, r2
 8000584:	604b      	str	r3, [r1, #4]
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	40023800 	.word	0x40023800

08000594 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <RCC_PLLCmd+0x1c>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	42470060 	.word	0x42470060

080005b4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <RCC_SYSCLKConfig+0x34>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f023 0303 	bic.w	r3, r3, #3
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005d6:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <RCC_SYSCLKConfig+0x34>)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	6093      	str	r3, [r2, #8]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <RCC_HCLKConfig+0x34>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000604:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <RCC_HCLKConfig+0x34>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	6093      	str	r3, [r2, #8]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800

08000624 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <RCC_PCLK1Config+0x34>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800063c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4313      	orrs	r3, r2
 8000644:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <RCC_PCLK1Config+0x34>)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	6093      	str	r3, [r2, #8]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <RCC_PCLK2Config+0x34>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000674:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	4313      	orrs	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <RCC_PCLK2Config+0x34>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6093      	str	r3, [r2, #8]
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40023800 	.word	0x40023800

08000694 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	2302      	movs	r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006b4:	4b4a      	ldr	r3, [pc, #296]	; (80007e0 <RCC_GetClocksFreq+0x14c>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f003 030c 	and.w	r3, r3, #12
 80006bc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	2b08      	cmp	r3, #8
 80006c2:	d011      	beq.n	80006e8 <RCC_GetClocksFreq+0x54>
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	2b08      	cmp	r3, #8
 80006c8:	d844      	bhi.n	8000754 <RCC_GetClocksFreq+0xc0>
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <RCC_GetClocksFreq+0x44>
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d004      	beq.n	80006e0 <RCC_GetClocksFreq+0x4c>
 80006d6:	e03d      	b.n	8000754 <RCC_GetClocksFreq+0xc0>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a42      	ldr	r2, [pc, #264]	; (80007e4 <RCC_GetClocksFreq+0x150>)
 80006dc:	601a      	str	r2, [r3, #0]
      break;
 80006de:	e03d      	b.n	800075c <RCC_GetClocksFreq+0xc8>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a41      	ldr	r2, [pc, #260]	; (80007e8 <RCC_GetClocksFreq+0x154>)
 80006e4:	601a      	str	r2, [r3, #0]
      break;
 80006e6:	e039      	b.n	800075c <RCC_GetClocksFreq+0xc8>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <RCC_GetClocksFreq+0x14c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	0d9b      	lsrs	r3, r3, #22
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	; (80007e0 <RCC_GetClocksFreq+0x14c>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006fc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00c      	beq.n	800071e <RCC_GetClocksFreq+0x8a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000704:	4a38      	ldr	r2, [pc, #224]	; (80007e8 <RCC_GetClocksFreq+0x154>)
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	fbb2 f3f3 	udiv	r3, r2, r3
 800070c:	4a34      	ldr	r2, [pc, #208]	; (80007e0 <RCC_GetClocksFreq+0x14c>)
 800070e:	6852      	ldr	r2, [r2, #4]
 8000710:	0992      	lsrs	r2, r2, #6
 8000712:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000716:	fb02 f303 	mul.w	r3, r2, r3
 800071a:	61fb      	str	r3, [r7, #28]
 800071c:	e00b      	b.n	8000736 <RCC_GetClocksFreq+0xa2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800071e:	4a31      	ldr	r2, [pc, #196]	; (80007e4 <RCC_GetClocksFreq+0x150>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4a2e      	ldr	r2, [pc, #184]	; (80007e0 <RCC_GetClocksFreq+0x14c>)
 8000728:	6852      	ldr	r2, [r2, #4]
 800072a:	0992      	lsrs	r2, r2, #6
 800072c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <RCC_GetClocksFreq+0x14c>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	0c1b      	lsrs	r3, r3, #16
 800073c:	f003 0303 	and.w	r3, r3, #3
 8000740:	3301      	adds	r3, #1
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000746:	69fa      	ldr	r2, [r7, #28]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	fbb2 f2f3 	udiv	r2, r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
      break;
 8000752:	e003      	b.n	800075c <RCC_GetClocksFreq+0xc8>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <RCC_GetClocksFreq+0x150>)
 8000758:	601a      	str	r2, [r3, #0]
      break;
 800075a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <RCC_GetClocksFreq+0x14c>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000764:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800076c:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <RCC_GetClocksFreq+0x158>)
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	40da      	lsrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <RCC_GetClocksFreq+0x14c>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800078c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	0a9b      	lsrs	r3, r3, #10
 8000792:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000794:	4a15      	ldr	r2, [pc, #84]	; (80007ec <RCC_GetClocksFreq+0x158>)
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	40da      	lsrs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <RCC_GetClocksFreq+0x14c>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80007b4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	0b5b      	lsrs	r3, r3, #13
 80007ba:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007bc:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <RCC_GetClocksFreq+0x158>)
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	685a      	ldr	r2, [r3, #4]
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	40da      	lsrs	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	60da      	str	r2, [r3, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3724      	adds	r7, #36	; 0x24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	00f42400 	.word	0x00f42400
 80007e8:	007a1200 	.word	0x007a1200
 80007ec:	20000000 	.word	0x20000000

080007f0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <RCC_AHB1PeriphClockCmd+0x38>)
 8000804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <RCC_AHB1PeriphClockCmd+0x38>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800080e:	e006      	b.n	800081e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <RCC_AHB1PeriphClockCmd+0x38>)
 8000812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	43db      	mvns	r3, r3
 8000818:	4903      	ldr	r1, [pc, #12]	; (8000828 <RCC_AHB1PeriphClockCmd+0x38>)
 800081a:	4013      	ands	r3, r2
 800081c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40023800 	.word	0x40023800

0800082c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d006      	beq.n	800084c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 8000840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4313      	orrs	r3, r2
 8000848:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800084a:	e006      	b.n	800085a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 800084e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	43db      	mvns	r3, r3
 8000854:	4903      	ldr	r1, [pc, #12]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 8000856:	4013      	ands	r3, r2
 8000858:	640b      	str	r3, [r1, #64]	; 0x40
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40023800 	.word	0x40023800

08000868 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d006      	beq.n	8000888 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <RCC_APB2PeriphClockCmd+0x38>)
 800087c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <RCC_APB2PeriphClockCmd+0x38>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4313      	orrs	r3, r2
 8000884:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000886:	e006      	b.n	8000896 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <RCC_APB2PeriphClockCmd+0x38>)
 800088a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	43db      	mvns	r3, r3
 8000890:	4903      	ldr	r1, [pc, #12]	; (80008a0 <RCC_APB2PeriphClockCmd+0x38>)
 8000892:	4013      	ands	r3, r2
 8000894:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40023800 	.word	0x40023800

080008a4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	095b      	lsrs	r3, r3, #5
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d103      	bne.n	80008d0 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <RCC_GetFlagStatus+0x70>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e009      	b.n	80008e4 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d103      	bne.n	80008de <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <RCC_GetFlagStatus+0x70>)
 80008d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e002      	b.n	80008e4 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <RCC_GetFlagStatus+0x70>)
 80008e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008e2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 031f 	and.w	r3, r3, #31
 80008ea:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	fa22 f303 	lsr.w	r3, r2, r3
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80008fc:	2301      	movs	r3, #1
 80008fe:	74fb      	strb	r3, [r7, #19]
 8000900:	e001      	b.n	8000906 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000906:	7cfb      	ldrb	r3, [r7, #19]
}
 8000908:	4618      	mov	r0, r3
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <TIM_TimeBaseInit+0xb8>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d013      	beq.n	800095c <TIM_TimeBaseInit+0x44>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <TIM_TimeBaseInit+0xbc>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d00f      	beq.n	800095c <TIM_TimeBaseInit+0x44>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d00b      	beq.n	800095c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a24      	ldr	r2, [pc, #144]	; (80009d8 <TIM_TimeBaseInit+0xc0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d007      	beq.n	800095c <TIM_TimeBaseInit+0x44>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <TIM_TimeBaseInit+0xc4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d003      	beq.n	800095c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <TIM_TimeBaseInit+0xc8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d108      	bne.n	800096e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800095c:	89fb      	ldrh	r3, [r7, #14]
 800095e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000962:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	885a      	ldrh	r2, [r3, #2]
 8000968:	89fb      	ldrh	r3, [r7, #14]
 800096a:	4313      	orrs	r3, r2
 800096c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <TIM_TimeBaseInit+0xcc>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00c      	beq.n	8000990 <TIM_TimeBaseInit+0x78>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <TIM_TimeBaseInit+0xd0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d008      	beq.n	8000990 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800097e:	89fb      	ldrh	r3, [r7, #14]
 8000980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000984:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	891a      	ldrh	r2, [r3, #8]
 800098a:	89fb      	ldrh	r3, [r7, #14]
 800098c:	4313      	orrs	r3, r2
 800098e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	89fa      	ldrh	r2, [r7, #14]
 8000994:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	881a      	ldrh	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <TIM_TimeBaseInit+0xb8>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d003      	beq.n	80009b6 <TIM_TimeBaseInit+0x9e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <TIM_TimeBaseInit+0xbc>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d104      	bne.n	80009c0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	7a9b      	ldrb	r3, [r3, #10]
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2201      	movs	r2, #1
 80009c4:	829a      	strh	r2, [r3, #20]
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	40010000 	.word	0x40010000
 80009d4:	40010400 	.word	0x40010400
 80009d8:	40000400 	.word	0x40000400
 80009dc:	40000800 	.word	0x40000800
 80009e0:	40000c00 	.word	0x40000c00
 80009e4:	40001000 	.word	0x40001000
 80009e8:	40001400 	.word	0x40001400

080009ec <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d008      	beq.n	8000a10 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000a0e:	e007      	b.n	8000a20 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	f023 0301 	bic.w	r3, r3, #1
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	801a      	strh	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00c      	beq.n	8000a56 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 8000a54:	e009      	b.n	8000a6a <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
 8000a80:	4613      	mov	r3, r2
 8000a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a84:	787b      	ldrb	r3, [r7, #1]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d008      	beq.n	8000a9c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	899b      	ldrh	r3, [r3, #12]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000a9a:	e009      	b.n	8000ab0 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	899b      	ldrh	r3, [r3, #12]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	819a      	strh	r2, [r3, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	821a      	strh	r2, [r3, #16]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
	...

08000adc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	8a1b      	ldrh	r3, [r3, #16]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	88db      	ldrh	r3, [r3, #6]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	899b      	ldrh	r3, [r3, #12]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000b28:	f023 030c 	bic.w	r3, r3, #12
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	889a      	ldrh	r2, [r3, #4]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	891b      	ldrh	r3, [r3, #8]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	461a      	mov	r2, r3
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	4313      	orrs	r3, r2
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	8a9b      	ldrh	r3, [r3, #20]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	899b      	ldrh	r3, [r3, #12]
 8000b66:	461a      	mov	r2, r3
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fd8a 	bl	8000694 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <USART_Init+0x168>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d003      	beq.n	8000b90 <USART_Init+0xb4>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <USART_Init+0x16c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d102      	bne.n	8000b96 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	e001      	b.n	8000b9a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	899b      	ldrh	r3, [r3, #12]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	da0c      	bge.n	8000bc0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ba6:	6a3a      	ldr	r2, [r7, #32]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	009a      	lsls	r2, r3, #2
 8000bb0:	441a      	add	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	e00b      	b.n	8000bd8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000bc0:	6a3a      	ldr	r2, [r7, #32]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009a      	lsls	r2, r3, #2
 8000bca:	441a      	add	r2, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <USART_Init+0x170>)
 8000bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000be0:	095b      	lsrs	r3, r3, #5
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	2264      	movs	r2, #100	; 0x64
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	899b      	ldrh	r3, [r3, #12]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	da0c      	bge.n	8000c1c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	3332      	adds	r3, #50	; 0x32
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <USART_Init+0x170>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c16:	4313      	orrs	r3, r2
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1a:	e00b      	b.n	8000c34 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	3332      	adds	r3, #50	; 0x32
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <USART_Init+0x170>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	095b      	lsrs	r3, r3, #5
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c30:	4313      	orrs	r3, r2
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	811a      	strh	r2, [r3, #8]
}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40011000 	.word	0x40011000
 8000c48:	40011400 	.word	0x40011400
 8000c4c:	51eb851f 	.word	0x51eb851f

08000c50 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	899b      	ldrh	r3, [r3, #12]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000c72:	e007      	b.n	8000c84 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	899b      	ldrh	r3, [r3, #12]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	819a      	strh	r2, [r3, #12]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b087      	sub	sp, #28
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	807b      	strh	r3, [r7, #2]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	f003 031f 	and.w	r3, r3, #31
 8000cc2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d103      	bne.n	8000cdc <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	330c      	adds	r3, #12
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e009      	b.n	8000cf0 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d103      	bne.n	8000cea <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3310      	adds	r3, #16
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e002      	b.n	8000cf0 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3314      	adds	r3, #20
 8000cee:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000cf0:	787b      	ldrb	r3, [r7, #1]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d006      	beq.n	8000d04 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	6819      	ldr	r1, [r3, #0]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000d02:	e006      	b.n	8000d12 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	6819      	ldr	r1, [r3, #0]
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	400a      	ands	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	371c      	adds	r7, #28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <_sbrk>:

#include <stdint.h>
#include <errno.h>
#include <stdio.h>

caddr_t  _sbrk(int incr) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	extern char _Heap_Limit; // Defined by the linker.

	static char* current_heap_end;
	char* current_block_address;

	if (current_heap_end == 0) {
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x16>
		current_heap_end = &_Heap_Begin;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <_sbrk+0x5c>)
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <_sbrk+0x60>)
 8000d30:	601a      	str	r2, [r3, #0]
	}

	current_block_address = current_heap_end;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_sbrk+0x5c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60fb      	str	r3, [r7, #12]

	// Need to align heap to word boundary, else will get
	// hard faults on Cortex-M0. So we assume that heap starts on
	// word boundary, hence make sure we always add a multiple of
	// 4 to it.
	incr = (incr + 3) & (~3); // align value to 4
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3303      	adds	r3, #3
 8000d3c:	f023 0303 	bic.w	r3, r3, #3
 8000d40:	607b      	str	r3, [r7, #4]
	if (current_heap_end + incr > &_Heap_Limit) {
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <_sbrk+0x5c>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <_sbrk+0x64>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d907      	bls.n	8000d60 <_sbrk+0x44>
      _write (1, "_sbrk: Heap and stack collision\n", 32);

      abort ();
#else
		// Heap has overflowed
		errno = ENOMEM;
 8000d50:	f002 fa60 	bl	8003214 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
		return (caddr_t) - 1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e006      	b.n	8000d6e <_sbrk+0x52>
#endif
	}

	current_heap_end += incr;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <_sbrk+0x5c>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <_sbrk+0x5c>)
 8000d6a:	6013      	str	r3, [r2, #0]

	return (caddr_t) current_block_address;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000090 	.word	0x20000090
 8000d7c:	20000620 	.word	0x20000620
 8000d80:	20001620 	.word	0x20001620

08000d84 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	2201      	movs	r2, #1
 8000d96:	fa02 f103 	lsl.w	r1, r2, r3
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <NVIC_EnableIRQ+0x2c>)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	095b      	lsrs	r3, r3, #5
 8000da2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	fa02 f103 	lsl.w	r1, r2, r3
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <NVIC_DisableIRQ+0x30>)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	095b      	lsrs	r3, r3, #5
 8000dd2:	3320      	adds	r3, #32
 8000dd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <vSetupPwm>:
uint32_t ui32DebugCounter = 0;
uint32_t ui32DebugIndex = 0;
uint32_t ui32DebugArray[1000];

/* Setup Pwm */
static void vSetupPwm() {
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	TIM1->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000dec:	4b97      	ldr	r3, [pc, #604]	; (800104c <vSetupPwm+0x264>)
 8000dee:	8c1b      	ldrh	r3, [r3, #32]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4a96      	ldr	r2, [pc, #600]	; (800104c <vSetupPwm+0x264>)
 8000df4:	f023 030a 	bic.w	r3, r3, #10
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	8413      	strh	r3, [r2, #32]
	TIM1->CCER &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000dfc:	4b93      	ldr	r3, [pc, #588]	; (800104c <vSetupPwm+0x264>)
 8000dfe:	8c1b      	ldrh	r3, [r3, #32]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4a92      	ldr	r2, [pc, #584]	; (800104c <vSetupPwm+0x264>)
 8000e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	8413      	strh	r3, [r2, #32]
	TIM1->CCER &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8000e0c:	4b8f      	ldr	r3, [pc, #572]	; (800104c <vSetupPwm+0x264>)
 8000e0e:	8c1b      	ldrh	r3, [r3, #32]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4a8e      	ldr	r2, [pc, #568]	; (800104c <vSetupPwm+0x264>)
 8000e14:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	8413      	strh	r3, [r2, #32]

	switch (stcGlobalConfiguration.ui8SignalStateU) {
 8000e1c:	4b8c      	ldr	r3, [pc, #560]	; (8001050 <vSetupPwm+0x268>)
 8000e1e:	7d9b      	ldrb	r3, [r3, #22]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d006      	beq.n	8000e32 <vSetupPwm+0x4a>
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	dc2e      	bgt.n	8000e86 <vSetupPwm+0x9e>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01e      	beq.n	8000e6a <vSetupPwm+0x82>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d00e      	beq.n	8000e4e <vSetupPwm+0x66>
 8000e30:	e029      	b.n	8000e86 <vSetupPwm+0x9e>
	case SIGNAL_STATE_FREQ:
		TIM1->CCMR1 = (TIM1->CCMR1 & (0x0FF8F)) | (TIM_OCMode_PWM1);
 8000e32:	4b86      	ldr	r3, [pc, #536]	; (800104c <vSetupPwm+0x264>)
 8000e34:	8b1b      	ldrh	r3, [r3, #24]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	4b81      	ldr	r3, [pc, #516]	; (800104c <vSetupPwm+0x264>)
 8000e48:	b292      	uxth	r2, r2
 8000e4a:	831a      	strh	r2, [r3, #24]
		break;
 8000e4c:	e01b      	b.n	8000e86 <vSetupPwm+0x9e>
	case SIGNAL_STATE_ON:
		TIM1->CCMR1 = (TIM1->CCMR1 & (0x0FF8F)) | (TIM_ForcedAction_Active);
 8000e4e:	4b7f      	ldr	r3, [pc, #508]	; (800104c <vSetupPwm+0x264>)
 8000e50:	8b1b      	ldrh	r3, [r3, #24]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	4b7a      	ldr	r3, [pc, #488]	; (800104c <vSetupPwm+0x264>)
 8000e64:	b292      	uxth	r2, r2
 8000e66:	831a      	strh	r2, [r3, #24]
		break;
 8000e68:	e00d      	b.n	8000e86 <vSetupPwm+0x9e>
	case SIGNAL_STATE_OFF:
		TIM1->CCMR1 = (TIM1->CCMR1 & (0x0FF8F)) | (TIM_ForcedAction_InActive);
 8000e6a:	4b78      	ldr	r3, [pc, #480]	; (800104c <vSetupPwm+0x264>)
 8000e6c:	8b1b      	ldrh	r3, [r3, #24]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	4b73      	ldr	r3, [pc, #460]	; (800104c <vSetupPwm+0x264>)
 8000e80:	b292      	uxth	r2, r2
 8000e82:	831a      	strh	r2, [r3, #24]
		break;
 8000e84:	bf00      	nop
	}

	switch (stcGlobalConfiguration.ui8SignalStateV) {
 8000e86:	4b72      	ldr	r3, [pc, #456]	; (8001050 <vSetupPwm+0x268>)
 8000e88:	7ddb      	ldrb	r3, [r3, #23]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d006      	beq.n	8000e9c <vSetupPwm+0xb4>
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	dc2e      	bgt.n	8000ef0 <vSetupPwm+0x108>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d01e      	beq.n	8000ed4 <vSetupPwm+0xec>
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d00e      	beq.n	8000eb8 <vSetupPwm+0xd0>
 8000e9a:	e029      	b.n	8000ef0 <vSetupPwm+0x108>
	case SIGNAL_STATE_FREQ:
		TIM1->CCMR1 = (TIM1->CCMR1 & (0x08FFF)) | (TIM_OCMode_PWM1 << 8);
 8000e9c:	4b6b      	ldr	r3, [pc, #428]	; (800104c <vSetupPwm+0x264>)
 8000e9e:	8b1b      	ldrh	r3, [r3, #24]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b66      	ldr	r3, [pc, #408]	; (800104c <vSetupPwm+0x264>)
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	831a      	strh	r2, [r3, #24]
		break;
 8000eb6:	e01b      	b.n	8000ef0 <vSetupPwm+0x108>
	case SIGNAL_STATE_ON:
		TIM1->CCMR1 = (TIM1->CCMR1 & (0x08FFF)) | (TIM_ForcedAction_Active << 8);
 8000eb8:	4b64      	ldr	r3, [pc, #400]	; (800104c <vSetupPwm+0x264>)
 8000eba:	8b1b      	ldrh	r3, [r3, #24]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	4b5f      	ldr	r3, [pc, #380]	; (800104c <vSetupPwm+0x264>)
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	831a      	strh	r2, [r3, #24]
		break;
 8000ed2:	e00d      	b.n	8000ef0 <vSetupPwm+0x108>
	case SIGNAL_STATE_OFF:
		TIM1->CCMR1 = (TIM1->CCMR1 & (0x08FFF)) | (TIM_ForcedAction_InActive << 8);
 8000ed4:	4b5d      	ldr	r3, [pc, #372]	; (800104c <vSetupPwm+0x264>)
 8000ed6:	8b1b      	ldrh	r3, [r3, #24]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b58      	ldr	r3, [pc, #352]	; (800104c <vSetupPwm+0x264>)
 8000eea:	b292      	uxth	r2, r2
 8000eec:	831a      	strh	r2, [r3, #24]
		break;
 8000eee:	bf00      	nop
	}

	switch (stcGlobalConfiguration.ui8SignalStateW) {
 8000ef0:	4b57      	ldr	r3, [pc, #348]	; (8001050 <vSetupPwm+0x268>)
 8000ef2:	7e1b      	ldrb	r3, [r3, #24]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d006      	beq.n	8000f06 <vSetupPwm+0x11e>
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	dc2e      	bgt.n	8000f5a <vSetupPwm+0x172>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d01e      	beq.n	8000f3e <vSetupPwm+0x156>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d00e      	beq.n	8000f22 <vSetupPwm+0x13a>
 8000f04:	e029      	b.n	8000f5a <vSetupPwm+0x172>
	case SIGNAL_STATE_FREQ:
		TIM1->CCMR2 = (TIM1->CCMR2 & (0x0FF8F)) | (TIM_OCMode_PWM1);
 8000f06:	4b51      	ldr	r3, [pc, #324]	; (800104c <vSetupPwm+0x264>)
 8000f08:	8b9b      	ldrh	r3, [r3, #28]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	4b4c      	ldr	r3, [pc, #304]	; (800104c <vSetupPwm+0x264>)
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	839a      	strh	r2, [r3, #28]
		break;
 8000f20:	e01b      	b.n	8000f5a <vSetupPwm+0x172>
	case SIGNAL_STATE_ON:
		TIM1->CCMR2 = (TIM1->CCMR2 & (0x0FF8F)) | (TIM_ForcedAction_Active);
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <vSetupPwm+0x264>)
 8000f24:	8b9b      	ldrh	r3, [r3, #28]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	4b45      	ldr	r3, [pc, #276]	; (800104c <vSetupPwm+0x264>)
 8000f38:	b292      	uxth	r2, r2
 8000f3a:	839a      	strh	r2, [r3, #28]
		break;
 8000f3c:	e00d      	b.n	8000f5a <vSetupPwm+0x172>
	case SIGNAL_STATE_OFF:
		TIM1->CCMR2 = (TIM1->CCMR2 & (0x0FF8F)) | (TIM_ForcedAction_InActive);
 8000f3e:	4b43      	ldr	r3, [pc, #268]	; (800104c <vSetupPwm+0x264>)
 8000f40:	8b9b      	ldrh	r3, [r3, #28]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <vSetupPwm+0x264>)
 8000f54:	b292      	uxth	r2, r2
 8000f56:	839a      	strh	r2, [r3, #28]
		break;
 8000f58:	bf00      	nop
	}

	TIM1->CCMR1 &= ~(TIM_CCMR1_OC1PE | TIM_CCMR1_OC2PE);		// Synchronize preloading CCR  on the update event
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	; (800104c <vSetupPwm+0x264>)
 8000f5c:	8b1b      	ldrh	r3, [r3, #24]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4a3a      	ldr	r2, [pc, #232]	; (800104c <vSetupPwm+0x264>)
 8000f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f66:	f023 0308 	bic.w	r3, r3, #8
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	8313      	strh	r3, [r2, #24]
	TIM1->CCMR2 &= ~(TIM_CCMR2_OC3PE);
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <vSetupPwm+0x264>)
 8000f70:	8b9b      	ldrh	r3, [r3, #28]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4a35      	ldr	r2, [pc, #212]	; (800104c <vSetupPwm+0x264>)
 8000f76:	f023 0308 	bic.w	r3, r3, #8
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	8393      	strh	r3, [r2, #28]

	// Offsets
	stcGlobalRuntimeData.ui16BottomOffsetU = stcGlobalConfiguration.ui16SignalOffsetU * TIM_PERIOD_PWM / 100;
 8000f7e:	4b34      	ldr	r3, [pc, #208]	; (8001050 <vSetupPwm+0x268>)
 8000f80:	895b      	ldrh	r3, [r3, #10]
 8000f82:	461a      	mov	r2, r3
 8000f84:	f641 036a 	movw	r3, #6250	; 0x186a
 8000f88:	fb03 f302 	mul.w	r3, r3, r2
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <vSetupPwm+0x26c>)
 8000f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f92:	1152      	asrs	r2, r2, #5
 8000f94:	17db      	asrs	r3, r3, #31
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <vSetupPwm+0x270>)
 8000f9c:	80da      	strh	r2, [r3, #6]
	stcGlobalRuntimeData.ui16BottomOffsetV = stcGlobalConfiguration.ui16SignalOffsetV * TIM_PERIOD_PWM / 100;
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <vSetupPwm+0x268>)
 8000fa0:	899b      	ldrh	r3, [r3, #12]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f641 036a 	movw	r3, #6250	; 0x186a
 8000fa8:	fb03 f302 	mul.w	r3, r3, r2
 8000fac:	4a29      	ldr	r2, [pc, #164]	; (8001054 <vSetupPwm+0x26c>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	1152      	asrs	r2, r2, #5
 8000fb4:	17db      	asrs	r3, r3, #31
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <vSetupPwm+0x270>)
 8000fbc:	811a      	strh	r2, [r3, #8]
	stcGlobalRuntimeData.ui16BottomOffsetW = stcGlobalConfiguration.ui16SignalOffsetW * TIM_PERIOD_PWM / 100;
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <vSetupPwm+0x268>)
 8000fc0:	89db      	ldrh	r3, [r3, #14]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	f641 036a 	movw	r3, #6250	; 0x186a
 8000fc8:	fb03 f302 	mul.w	r3, r3, r2
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <vSetupPwm+0x26c>)
 8000fce:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd2:	1152      	asrs	r2, r2, #5
 8000fd4:	17db      	asrs	r3, r3, #31
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <vSetupPwm+0x270>)
 8000fdc:	815a      	strh	r2, [r3, #10]

	// Shifts
	stcGlobalRuntimeData.ui16ShiftU = stcGlobalConfiguration.ui16SignalShiftU * mTotalNumberOfValues / 360;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <vSetupPwm+0x268>)
 8000fe0:	8a1b      	ldrh	r3, [r3, #16]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000fe8:	fb03 f302 	mul.w	r3, r3, r2
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <vSetupPwm+0x274>)
 8000fee:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff2:	441a      	add	r2, r3
 8000ff4:	1212      	asrs	r2, r2, #8
 8000ff6:	17db      	asrs	r3, r3, #31
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <vSetupPwm+0x270>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	stcGlobalRuntimeData.ui16ShiftV = stcGlobalConfiguration.ui16SignalShiftV * mTotalNumberOfValues / 360;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <vSetupPwm+0x268>)
 8001002:	8a5b      	ldrh	r3, [r3, #18]
 8001004:	461a      	mov	r2, r3
 8001006:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800100a:	fb03 f302 	mul.w	r3, r3, r2
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <vSetupPwm+0x274>)
 8001010:	fb82 1203 	smull	r1, r2, r2, r3
 8001014:	441a      	add	r2, r3
 8001016:	1212      	asrs	r2, r2, #8
 8001018:	17db      	asrs	r3, r3, #31
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <vSetupPwm+0x270>)
 8001020:	805a      	strh	r2, [r3, #2]
	stcGlobalRuntimeData.ui16ShiftW = stcGlobalConfiguration.ui16SignalShiftW * mTotalNumberOfValues / 360;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <vSetupPwm+0x268>)
 8001024:	8a9b      	ldrh	r3, [r3, #20]
 8001026:	461a      	mov	r2, r3
 8001028:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800102c:	fb03 f302 	mul.w	r3, r3, r2
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <vSetupPwm+0x274>)
 8001032:	fb82 1203 	smull	r1, r2, r2, r3
 8001036:	441a      	add	r2, r3
 8001038:	1212      	asrs	r2, r2, #8
 800103a:	17db      	asrs	r3, r3, #31
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <vSetupPwm+0x270>)
 8001042:	809a      	strh	r2, [r3, #4]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	40010000 	.word	0x40010000
 8001050:	200005b8 	.word	0x200005b8
 8001054:	51eb851f 	.word	0x51eb851f
 8001058:	200005d4 	.word	0x200005d4
 800105c:	b60b60b7 	.word	0xb60b60b7

08001060 <vSetupHtl>:
/*------------
 *  1  |  2  |
 *     |     |
 *------------
 * */
static void vSetupHtl() {
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
	Configuration_t *pconfiguration = &stcGlobalConfiguration;
 8001066:	4b8e      	ldr	r3, [pc, #568]	; (80012a0 <vSetupHtl+0x240>)
 8001068:	60bb      	str	r3, [r7, #8]
	uint32_t ui32TempCcVal0 = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
	uint32_t ui32TempCcVal1 = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
	uint32_t ui32TempCcVal2 = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]

	uint16_t ui16Counter = TIM1->CNT;
 8001076:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <vSetupHtl+0x244>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	80fb      	strh	r3, [r7, #6]
	uint16_t ui16PortE = GPIOE->IDR;
 800107c:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <vSetupHtl+0x248>)
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	80bb      	strh	r3, [r7, #4]

	uint8_t ui8Ccr1triggered = ((TIM1->CCR1 <= ui16Counter));
 8001082:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <vSetupHtl+0x244>)
 8001084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	429a      	cmp	r2, r3
 800108a:	bf94      	ite	ls
 800108c:	2301      	movls	r3, #1
 800108e:	2300      	movhi	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	70fb      	strb	r3, [r7, #3]
	uint8_t ui8Ccr2triggered = ((TIM1->CCR2 <= ui16Counter));
 8001094:	4b83      	ldr	r3, [pc, #524]	; (80012a4 <vSetupHtl+0x244>)
 8001096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	429a      	cmp	r2, r3
 800109c:	bf94      	ite	ls
 800109e:	2301      	movls	r3, #1
 80010a0:	2300      	movhi	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	70bb      	strb	r3, [r7, #2]
	uint8_t ui8Ccr3triggered = ((TIM1->CCR3 <= ui16Counter));
 80010a6:	4b7f      	ldr	r3, [pc, #508]	; (80012a4 <vSetupHtl+0x244>)
 80010a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	bf94      	ite	ls
 80010b0:	2301      	movls	r3, #1
 80010b2:	2300      	movhi	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	707b      	strb	r3, [r7, #1]

	TIM1->SR &= ~TIM_SR_UIF;
 80010b8:	4b7a      	ldr	r3, [pc, #488]	; (80012a4 <vSetupHtl+0x244>)
 80010ba:	8a1b      	ldrh	r3, [r3, #16]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4a79      	ldr	r2, [pc, #484]	; (80012a4 <vSetupHtl+0x244>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	8213      	strh	r3, [r2, #16]
	TIM1->CR2 &= (0x0F);	// Clear Inactive
 80010c8:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <vSetupHtl+0x244>)
 80010ca:	889b      	ldrh	r3, [r3, #4]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4a75      	ldr	r2, [pc, #468]	; (80012a4 <vSetupHtl+0x244>)
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	8093      	strh	r3, [r2, #4]

	// Signal U

	//TIM1->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);

	switch (pconfiguration->ui8SignalStateU) {
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	7d9b      	ldrb	r3, [r3, #22]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d006      	beq.n	80010ee <vSetupHtl+0x8e>
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	dc77      	bgt.n	80011d4 <vSetupHtl+0x174>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05c      	beq.n	80011a2 <vSetupHtl+0x142>
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d041      	beq.n	8001170 <vSetupHtl+0x110>
 80010ec:	e072      	b.n	80011d4 <vSetupHtl+0x174>
	case SIGNAL_STATE_FREQ:
		if (pconfiguration->ui16SignalShiftU > 180) {
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	8a1b      	ldrh	r3, [r3, #16]
 80010f2:	2bb4      	cmp	r3, #180	; 0xb4
 80010f4:	d917      	bls.n	8001126 <vSetupHtl+0xc6>
			ui32TempCcVal0 = TIM_PERIOD_HTL * (pconfiguration->ui16SignalShiftU - 180) / 180;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	8a1b      	ldrh	r3, [r3, #16]
 80010fa:	3bb4      	subs	r3, #180	; 0xb4
 80010fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	4a69      	ldr	r2, [pc, #420]	; (80012ac <vSetupHtl+0x24c>)
 8001106:	fb82 1203 	smull	r1, r2, r2, r3
 800110a:	441a      	add	r2, r3
 800110c:	11d2      	asrs	r2, r2, #7
 800110e:	17db      	asrs	r3, r3, #31
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
			TIM1->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001114:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <vSetupHtl+0x244>)
 8001116:	8c1b      	ldrh	r3, [r3, #32]
 8001118:	b29b      	uxth	r3, r3
 800111a:	4a62      	ldr	r2, [pc, #392]	; (80012a4 <vSetupHtl+0x244>)
 800111c:	f043 030a 	orr.w	r3, r3, #10
 8001120:	b29b      	uxth	r3, r3
 8001122:	8413      	strh	r3, [r2, #32]
 8001124:	e016      	b.n	8001154 <vSetupHtl+0xf4>
		} else {
			TIM1->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001126:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <vSetupHtl+0x244>)
 8001128:	8c1b      	ldrh	r3, [r3, #32]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4a5d      	ldr	r2, [pc, #372]	; (80012a4 <vSetupHtl+0x244>)
 800112e:	f023 030a 	bic.w	r3, r3, #10
 8001132:	b29b      	uxth	r3, r3
 8001134:	8413      	strh	r3, [r2, #32]
			ui32TempCcVal0 = TIM_PERIOD_HTL * (pconfiguration->ui16SignalShiftU) / 180;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	8a1b      	ldrh	r3, [r3, #16]
 800113a:	461a      	mov	r2, r3
 800113c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001140:	fb03 f302 	mul.w	r3, r3, r2
 8001144:	4a59      	ldr	r2, [pc, #356]	; (80012ac <vSetupHtl+0x24c>)
 8001146:	fb82 1203 	smull	r1, r2, r2, r3
 800114a:	441a      	add	r2, r3
 800114c:	11d2      	asrs	r2, r2, #7
 800114e:	17db      	asrs	r3, r3, #31
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
		}

		TIM1->CCMR1 = (TIM1->CCMR1 & (0xFF8F)) | TIM_OCMode_Toggle;
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <vSetupHtl+0x244>)
 8001156:	8b1b      	ldrh	r3, [r3, #24]
 8001158:	b29b      	uxth	r3, r3
 800115a:	b21b      	sxth	r3, r3
 800115c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001160:	b21b      	sxth	r3, r3
 8001162:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <vSetupHtl+0x244>)
 800116a:	b292      	uxth	r2, r2
 800116c:	831a      	strh	r2, [r3, #24]
		break;
 800116e:	e031      	b.n	80011d4 <vSetupHtl+0x174>
	case SIGNAL_STATE_ON:
		TIM1->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001170:	4b4c      	ldr	r3, [pc, #304]	; (80012a4 <vSetupHtl+0x244>)
 8001172:	8c1b      	ldrh	r3, [r3, #32]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4a4b      	ldr	r2, [pc, #300]	; (80012a4 <vSetupHtl+0x244>)
 8001178:	f023 030a 	bic.w	r3, r3, #10
 800117c:	b29b      	uxth	r3, r3
 800117e:	8413      	strh	r3, [r2, #32]
		TIM1->CCMR1 = ((TIM1->CCMR1) & 0xFF8F) | (TIM_ForcedAction_Active);
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <vSetupHtl+0x244>)
 8001182:	8b1b      	ldrh	r3, [r3, #24]
 8001184:	b29b      	uxth	r3, r3
 8001186:	b21b      	sxth	r3, r3
 8001188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800118c:	b21b      	sxth	r3, r3
 800118e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <vSetupHtl+0x244>)
 8001196:	b292      	uxth	r2, r2
 8001198:	831a      	strh	r2, [r3, #24]
		TIM1->CCR1 = 0;
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <vSetupHtl+0x244>)
 800119c:	2200      	movs	r2, #0
 800119e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80011a0:	e018      	b.n	80011d4 <vSetupHtl+0x174>
	case SIGNAL_STATE_OFF:
		TIM1->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80011a2:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <vSetupHtl+0x244>)
 80011a4:	8c1b      	ldrh	r3, [r3, #32]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	4a3e      	ldr	r2, [pc, #248]	; (80012a4 <vSetupHtl+0x244>)
 80011aa:	f023 030a 	bic.w	r3, r3, #10
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	8413      	strh	r3, [r2, #32]
		TIM1->CCMR1 = ((TIM1->CCMR1) & 0xFF8F) | (TIM_ForcedAction_InActive);
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <vSetupHtl+0x244>)
 80011b4:	8b1b      	ldrh	r3, [r3, #24]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011be:	b21b      	sxth	r3, r3
 80011c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <vSetupHtl+0x244>)
 80011c8:	b292      	uxth	r2, r2
 80011ca:	831a      	strh	r2, [r3, #24]
		TIM1->CCR1 = 0;
 80011cc:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <vSetupHtl+0x244>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80011d2:	bf00      	nop
	}

	switch (pconfiguration->ui8SignalStateV) {
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	7ddb      	ldrb	r3, [r3, #23]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d007      	beq.n	80011ec <vSetupHtl+0x18c>
 80011dc:	2b02      	cmp	r3, #2
 80011de:	f300 8080 	bgt.w	80012e2 <vSetupHtl+0x282>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d064      	beq.n	80012b0 <vSetupHtl+0x250>
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d041      	beq.n	800126e <vSetupHtl+0x20e>
 80011ea:	e07a      	b.n	80012e2 <vSetupHtl+0x282>
	case SIGNAL_STATE_FREQ:
		if (pconfiguration->ui16SignalShiftV > 180) {
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	8a5b      	ldrh	r3, [r3, #18]
 80011f0:	2bb4      	cmp	r3, #180	; 0xb4
 80011f2:	d917      	bls.n	8001224 <vSetupHtl+0x1c4>
			ui32TempCcVal1 = TIM_PERIOD_HTL * (pconfiguration->ui16SignalShiftV - 180) / 180;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	8a5b      	ldrh	r3, [r3, #18]
 80011f8:	3bb4      	subs	r3, #180	; 0xb4
 80011fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <vSetupHtl+0x24c>)
 8001204:	fb82 1203 	smull	r1, r2, r2, r3
 8001208:	441a      	add	r2, r3
 800120a:	11d2      	asrs	r2, r2, #7
 800120c:	17db      	asrs	r3, r3, #31
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	613b      	str	r3, [r7, #16]
			TIM1->CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <vSetupHtl+0x244>)
 8001214:	8c1b      	ldrh	r3, [r3, #32]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <vSetupHtl+0x244>)
 800121a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800121e:	b29b      	uxth	r3, r3
 8001220:	8413      	strh	r3, [r2, #32]
 8001222:	e016      	b.n	8001252 <vSetupHtl+0x1f2>
		} else {
			TIM1->CCER &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <vSetupHtl+0x244>)
 8001226:	8c1b      	ldrh	r3, [r3, #32]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <vSetupHtl+0x244>)
 800122c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001230:	b29b      	uxth	r3, r3
 8001232:	8413      	strh	r3, [r2, #32]
			ui32TempCcVal1 = TIM_PERIOD_HTL * (pconfiguration->ui16SignalShiftV) / 180;
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	8a5b      	ldrh	r3, [r3, #18]
 8001238:	461a      	mov	r2, r3
 800123a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800123e:	fb03 f302 	mul.w	r3, r3, r2
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <vSetupHtl+0x24c>)
 8001244:	fb82 1203 	smull	r1, r2, r2, r3
 8001248:	441a      	add	r2, r3
 800124a:	11d2      	asrs	r2, r2, #7
 800124c:	17db      	asrs	r3, r3, #31
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	613b      	str	r3, [r7, #16]
		}

		TIM1->CCMR1 = (TIM1->CCMR1 & (0x08FFF)) | (TIM_OCMode_Toggle << 8);
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <vSetupHtl+0x244>)
 8001254:	8b1b      	ldrh	r3, [r3, #24]
 8001256:	b29b      	uxth	r3, r3
 8001258:	b21b      	sxth	r3, r3
 800125a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800125e:	b21b      	sxth	r3, r3
 8001260:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001264:	b21a      	sxth	r2, r3
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <vSetupHtl+0x244>)
 8001268:	b292      	uxth	r2, r2
 800126a:	831a      	strh	r2, [r3, #24]
		break;
 800126c:	e039      	b.n	80012e2 <vSetupHtl+0x282>
	case SIGNAL_STATE_ON:
		TIM1->CCER &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <vSetupHtl+0x244>)
 8001270:	8c1b      	ldrh	r3, [r3, #32]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <vSetupHtl+0x244>)
 8001276:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800127a:	b29b      	uxth	r3, r3
 800127c:	8413      	strh	r3, [r2, #32]
		TIM1->CCMR1 = ((TIM1->CCMR1) & 0x08FFF) | (TIM_ForcedAction_Active << 8);
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <vSetupHtl+0x244>)
 8001280:	8b1b      	ldrh	r3, [r3, #24]
 8001282:	b29b      	uxth	r3, r3
 8001284:	b21b      	sxth	r3, r3
 8001286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800128a:	b21b      	sxth	r3, r3
 800128c:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8001290:	b21a      	sxth	r2, r3
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <vSetupHtl+0x244>)
 8001294:	b292      	uxth	r2, r2
 8001296:	831a      	strh	r2, [r3, #24]
		TIM1->CCR2 = 0;
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <vSetupHtl+0x244>)
 800129a:	2200      	movs	r2, #0
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800129e:	e020      	b.n	80012e2 <vSetupHtl+0x282>
 80012a0:	200005b8 	.word	0x200005b8
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40021000 	.word	0x40021000
 80012ac:	b60b60b7 	.word	0xb60b60b7
	case SIGNAL_STATE_OFF:
		TIM1->CCER &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <vSetupHtl+0x3b8>)
 80012b2:	8c1b      	ldrh	r3, [r3, #32]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4a58      	ldr	r2, [pc, #352]	; (8001418 <vSetupHtl+0x3b8>)
 80012b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80012bc:	b29b      	uxth	r3, r3
 80012be:	8413      	strh	r3, [r2, #32]
		TIM1->CCMR1 = ((TIM1->CCMR1) & 0x08FFF) | (TIM_ForcedAction_InActive << 8);
 80012c0:	4b55      	ldr	r3, [pc, #340]	; (8001418 <vSetupHtl+0x3b8>)
 80012c2:	8b1b      	ldrh	r3, [r3, #24]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <vSetupHtl+0x3b8>)
 80012d6:	b292      	uxth	r2, r2
 80012d8:	831a      	strh	r2, [r3, #24]
		TIM1->CCR2 = 0;
 80012da:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <vSetupHtl+0x3b8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80012e0:	bf00      	nop
	}

	switch (pconfiguration->ui8SignalStateW) {
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	7e1b      	ldrb	r3, [r3, #24]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d006      	beq.n	80012f8 <vSetupHtl+0x298>
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	dc77      	bgt.n	80013de <vSetupHtl+0x37e>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d05c      	beq.n	80013ac <vSetupHtl+0x34c>
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d041      	beq.n	800137a <vSetupHtl+0x31a>
 80012f6:	e072      	b.n	80013de <vSetupHtl+0x37e>
	case SIGNAL_STATE_FREQ:
		if (pconfiguration->ui16SignalShiftW > 180) {
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	8a9b      	ldrh	r3, [r3, #20]
 80012fc:	2bb4      	cmp	r3, #180	; 0xb4
 80012fe:	d917      	bls.n	8001330 <vSetupHtl+0x2d0>
			ui32TempCcVal2 = TIM_PERIOD_HTL * (pconfiguration->ui16SignalShiftW - 180) / 180;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	8a9b      	ldrh	r3, [r3, #20]
 8001304:	3bb4      	subs	r3, #180	; 0xb4
 8001306:	f44f 7248 	mov.w	r2, #800	; 0x320
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	4a43      	ldr	r2, [pc, #268]	; (800141c <vSetupHtl+0x3bc>)
 8001310:	fb82 1203 	smull	r1, r2, r2, r3
 8001314:	441a      	add	r2, r3
 8001316:	11d2      	asrs	r2, r2, #7
 8001318:	17db      	asrs	r3, r3, #31
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	60fb      	str	r3, [r7, #12]
			TIM1->CCER |= (TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800131e:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <vSetupHtl+0x3b8>)
 8001320:	8c1b      	ldrh	r3, [r3, #32]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4a3c      	ldr	r2, [pc, #240]	; (8001418 <vSetupHtl+0x3b8>)
 8001326:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800132a:	b29b      	uxth	r3, r3
 800132c:	8413      	strh	r3, [r2, #32]
 800132e:	e016      	b.n	800135e <vSetupHtl+0x2fe>
		} else {
			TIM1->CCER &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001330:	4b39      	ldr	r3, [pc, #228]	; (8001418 <vSetupHtl+0x3b8>)
 8001332:	8c1b      	ldrh	r3, [r3, #32]
 8001334:	b29b      	uxth	r3, r3
 8001336:	4a38      	ldr	r2, [pc, #224]	; (8001418 <vSetupHtl+0x3b8>)
 8001338:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800133c:	b29b      	uxth	r3, r3
 800133e:	8413      	strh	r3, [r2, #32]
			ui32TempCcVal2 = TIM_PERIOD_HTL * (pconfiguration->ui16SignalShiftW) / 180;
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	8a9b      	ldrh	r3, [r3, #20]
 8001344:	461a      	mov	r2, r3
 8001346:	f44f 7348 	mov.w	r3, #800	; 0x320
 800134a:	fb03 f302 	mul.w	r3, r3, r2
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <vSetupHtl+0x3bc>)
 8001350:	fb82 1203 	smull	r1, r2, r2, r3
 8001354:	441a      	add	r2, r3
 8001356:	11d2      	asrs	r2, r2, #7
 8001358:	17db      	asrs	r3, r3, #31
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	60fb      	str	r3, [r7, #12]
		}

		TIM1->CCMR2 = (TIM1->CCMR2 & (0xFF8F)) | TIM_OCMode_Toggle;
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <vSetupHtl+0x3b8>)
 8001360:	8b9b      	ldrh	r3, [r3, #28]
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136a:	b21b      	sxth	r3, r3
 800136c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <vSetupHtl+0x3b8>)
 8001374:	b292      	uxth	r2, r2
 8001376:	839a      	strh	r2, [r3, #28]
		break;
 8001378:	e031      	b.n	80013de <vSetupHtl+0x37e>
	case SIGNAL_STATE_ON:
		TIM1->CCER &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <vSetupHtl+0x3b8>)
 800137c:	8c1b      	ldrh	r3, [r3, #32]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4a25      	ldr	r2, [pc, #148]	; (8001418 <vSetupHtl+0x3b8>)
 8001382:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001386:	b29b      	uxth	r3, r3
 8001388:	8413      	strh	r3, [r2, #32]
		TIM1->CCMR2 = ((TIM1->CCMR2) & 0xFF8F) | (TIM_ForcedAction_Active);
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <vSetupHtl+0x3b8>)
 800138c:	8b9b      	ldrh	r3, [r3, #28]
 800138e:	b29b      	uxth	r3, r3
 8001390:	b21b      	sxth	r3, r3
 8001392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001396:	b21b      	sxth	r3, r3
 8001398:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <vSetupHtl+0x3b8>)
 80013a0:	b292      	uxth	r2, r2
 80013a2:	839a      	strh	r2, [r3, #28]
		TIM1->CCR3 = 0;
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <vSetupHtl+0x3b8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80013aa:	e018      	b.n	80013de <vSetupHtl+0x37e>
	case SIGNAL_STATE_OFF:
		TIM1->CCER &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <vSetupHtl+0x3b8>)
 80013ae:	8c1b      	ldrh	r3, [r3, #32]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <vSetupHtl+0x3b8>)
 80013b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	8413      	strh	r3, [r2, #32]
		TIM1->CCMR2 = ((TIM1->CCMR2) & 0xFF8F) | (TIM_ForcedAction_InActive);
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <vSetupHtl+0x3b8>)
 80013be:	8b9b      	ldrh	r3, [r3, #28]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <vSetupHtl+0x3b8>)
 80013d2:	b292      	uxth	r2, r2
 80013d4:	839a      	strh	r2, [r3, #28]
		TIM1->CCR3 = 0;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <vSetupHtl+0x3b8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80013dc:	bf00      	nop
	}

	dSystemGeneratorPeriod(TIM_PERIOD_HTL)
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <vSetupHtl+0x3b8>)
 80013e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
	dSystemGeneratorPrescaler(TIM_PRESCALER_HTL/pconfiguration->ui32SignalFrequencyMaster)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f24f 4224 	movw	r2, #62500	; 0xf424
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4a08      	ldr	r2, [pc, #32]	; (8001418 <vSetupHtl+0x3b8>)
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	8513      	strh	r3, [r2, #40]	; 0x28
	dSystemGeneratorFrequencies(ui32TempCcVal0, ui32TempCcVal1, ui32TempCcVal2)
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <vSetupHtl+0x3b8>)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	6353      	str	r3, [r2, #52]	; 0x34
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <vSetupHtl+0x3b8>)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	6393      	str	r3, [r2, #56]	; 0x38
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <vSetupHtl+0x3b8>)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	63d3      	str	r3, [r2, #60]	; 0x3c

}
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40010000 	.word	0x40010000
 800141c:	b60b60b7 	.word	0xb60b60b7

08001420 <vSetDefaultConfiguration>:

/* Initialize default parameters */
void vSetDefaultConfiguration() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af02      	add	r7, sp, #8
	vSetMode(MODE_PWM16Khz);
 8001426:	2001      	movs	r0, #1
 8001428:	f001 fc36 	bl	8002c98 <vSetMode>
	vSetShifts(10, 120, 240);
 800142c:	22f0      	movs	r2, #240	; 0xf0
 800142e:	2178      	movs	r1, #120	; 0x78
 8001430:	200a      	movs	r0, #10
 8001432:	f001 fc0f 	bl	8002c54 <vSetShifts>
	vSetFrequencies(2, SIGNAL_STATE_OFF, SIGNAL_STATE_OFF, SIGNAL_STATE_OFF);
 8001436:	2300      	movs	r3, #0
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2002      	movs	r0, #2
 800143e:	f001 fc49 	bl	8002cd4 <vSetFrequencies>
	vSetAmplitudesAndOffsets(20, 20, 20, 0, 0, 0);
 8001442:	2300      	movs	r3, #0
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	2300      	movs	r3, #0
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2300      	movs	r3, #0
 800144c:	2214      	movs	r2, #20
 800144e:	2114      	movs	r1, #20
 8001450:	2014      	movs	r0, #20
 8001452:	f001 fc69 	bl	8002d28 <vSetAmplitudesAndOffsets>

}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <vBuildResponse>:

/* Response with status*/
void vBuildResponse(uint16_t ui16state, uint8_t ui8error) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	460a      	mov	r2, r1
 8001466:	80fb      	strh	r3, [r7, #6]
 8001468:	4613      	mov	r3, r2
 800146a:	717b      	strb	r3, [r7, #5]

	if (ui16state == CMD_GET_ALL && !ui8error) {
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	2b31      	cmp	r3, #49	; 0x31
 8001470:	f040 8564 	bne.w	8001f3c <vBuildResponse+0xae0>
 8001474:	797b      	ldrb	r3, [r7, #5]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 8560 	bne.w	8001f3c <vBuildResponse+0xae0>
		Configuration_t *pconfiguration = &stcGlobalConfiguration;
 800147c:	4b87      	ldr	r3, [pc, #540]	; (800169c <vBuildResponse+0x240>)
 800147e:	60fb      	str	r3, [r7, #12]

		dPutByteIntoQueue(stcQueueTx, (4 + 1 + 4 + 3 + 3 * 6))
 8001480:	4b87      	ldr	r3, [pc, #540]	; (80016a0 <vBuildResponse+0x244>)
 8001482:	88da      	ldrh	r2, [r3, #6]
 8001484:	4b86      	ldr	r3, [pc, #536]	; (80016a0 <vBuildResponse+0x244>)
 8001486:	889b      	ldrh	r3, [r3, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	d302      	bcc.n	8001492 <vBuildResponse+0x36>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
 8001490:	e7fe      	b.n	8001490 <vBuildResponse+0x34>
 8001492:	4b83      	ldr	r3, [pc, #524]	; (80016a0 <vBuildResponse+0x244>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a82      	ldr	r2, [pc, #520]	; (80016a0 <vBuildResponse+0x244>)
 8001498:	8952      	ldrh	r2, [r2, #10]
 800149a:	4413      	add	r3, r2
 800149c:	221e      	movs	r2, #30
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	4b7f      	ldr	r3, [pc, #508]	; (80016a0 <vBuildResponse+0x244>)
 80014a2:	895b      	ldrh	r3, [r3, #10]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <vBuildResponse+0x244>)
 80014ac:	889b      	ldrh	r3, [r3, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4013      	ands	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <vBuildResponse+0x244>)
 80014bc:	815a      	strh	r2, [r3, #10]
 80014be:	201c      	movs	r0, #28
 80014c0:	f7ff fc78 	bl	8000db4 <NVIC_DisableIRQ>
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <vBuildResponse+0x244>)
 80014c6:	88db      	ldrh	r3, [r3, #6]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b74      	ldr	r3, [pc, #464]	; (80016a0 <vBuildResponse+0x244>)
 80014ce:	80da      	strh	r2, [r3, #6]
 80014d0:	201c      	movs	r0, #28
 80014d2:	f7ff fc57 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (CMD_GET_ALL >> 8))
 80014d6:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <vBuildResponse+0x244>)
 80014d8:	88da      	ldrh	r2, [r3, #6]
 80014da:	4b71      	ldr	r3, [pc, #452]	; (80016a0 <vBuildResponse+0x244>)
 80014dc:	889b      	ldrh	r3, [r3, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d302      	bcc.n	80014e8 <vBuildResponse+0x8c>
  __ASM volatile ("cpsid i");
 80014e2:	b672      	cpsid	i
}
 80014e4:	bf00      	nop
 80014e6:	e7fe      	b.n	80014e6 <vBuildResponse+0x8a>
 80014e8:	4b6d      	ldr	r3, [pc, #436]	; (80016a0 <vBuildResponse+0x244>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a6c      	ldr	r2, [pc, #432]	; (80016a0 <vBuildResponse+0x244>)
 80014ee:	8952      	ldrh	r2, [r2, #10]
 80014f0:	4413      	add	r3, r2
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <vBuildResponse+0x244>)
 80014f8:	895b      	ldrh	r3, [r3, #10]
 80014fa:	3301      	adds	r3, #1
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b21a      	sxth	r2, r3
 8001500:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <vBuildResponse+0x244>)
 8001502:	889b      	ldrh	r3, [r3, #4]
 8001504:	3b01      	subs	r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21b      	sxth	r3, r3
 800150a:	4013      	ands	r3, r2
 800150c:	b21b      	sxth	r3, r3
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <vBuildResponse+0x244>)
 8001512:	815a      	strh	r2, [r3, #10]
 8001514:	201c      	movs	r0, #28
 8001516:	f7ff fc4d 	bl	8000db4 <NVIC_DisableIRQ>
 800151a:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <vBuildResponse+0x244>)
 800151c:	88db      	ldrh	r3, [r3, #6]
 800151e:	3301      	adds	r3, #1
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <vBuildResponse+0x244>)
 8001524:	80da      	strh	r2, [r3, #6]
 8001526:	201c      	movs	r0, #28
 8001528:	f7ff fc2c 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) CMD_GET_ALL);
 800152c:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <vBuildResponse+0x244>)
 800152e:	88da      	ldrh	r2, [r3, #6]
 8001530:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <vBuildResponse+0x244>)
 8001532:	889b      	ldrh	r3, [r3, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	d302      	bcc.n	800153e <vBuildResponse+0xe2>
  __ASM volatile ("cpsid i");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
 800153c:	e7fe      	b.n	800153c <vBuildResponse+0xe0>
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <vBuildResponse+0x244>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <vBuildResponse+0x244>)
 8001544:	8952      	ldrh	r2, [r2, #10]
 8001546:	4413      	add	r3, r2
 8001548:	2231      	movs	r2, #49	; 0x31
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <vBuildResponse+0x244>)
 800154e:	895b      	ldrh	r3, [r3, #10]
 8001550:	3301      	adds	r3, #1
 8001552:	b29b      	uxth	r3, r3
 8001554:	b21a      	sxth	r2, r3
 8001556:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <vBuildResponse+0x244>)
 8001558:	889b      	ldrh	r3, [r3, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	b29b      	uxth	r3, r3
 800155e:	b21b      	sxth	r3, r3
 8001560:	4013      	ands	r3, r2
 8001562:	b21b      	sxth	r3, r3
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b4e      	ldr	r3, [pc, #312]	; (80016a0 <vBuildResponse+0x244>)
 8001568:	815a      	strh	r2, [r3, #10]
 800156a:	201c      	movs	r0, #28
 800156c:	f7ff fc22 	bl	8000db4 <NVIC_DisableIRQ>
 8001570:	4b4b      	ldr	r3, [pc, #300]	; (80016a0 <vBuildResponse+0x244>)
 8001572:	88db      	ldrh	r3, [r3, #6]
 8001574:	3301      	adds	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <vBuildResponse+0x244>)
 800157a:	80da      	strh	r2, [r3, #6]
 800157c:	201c      	movs	r0, #28
 800157e:	f7ff fc01 	bl	8000d84 <NVIC_EnableIRQ>
		// Error status
		dPutByteIntoQueue(stcQueueTx, 0)
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <vBuildResponse+0x244>)
 8001584:	88da      	ldrh	r2, [r3, #6]
 8001586:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <vBuildResponse+0x244>)
 8001588:	889b      	ldrh	r3, [r3, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d302      	bcc.n	8001594 <vBuildResponse+0x138>
  __ASM volatile ("cpsid i");
 800158e:	b672      	cpsid	i
}
 8001590:	bf00      	nop
 8001592:	e7fe      	b.n	8001592 <vBuildResponse+0x136>
 8001594:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <vBuildResponse+0x244>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a41      	ldr	r2, [pc, #260]	; (80016a0 <vBuildResponse+0x244>)
 800159a:	8952      	ldrh	r2, [r2, #10]
 800159c:	4413      	add	r3, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <vBuildResponse+0x244>)
 80015a4:	895b      	ldrh	r3, [r3, #10]
 80015a6:	3301      	adds	r3, #1
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <vBuildResponse+0x244>)
 80015ae:	889b      	ldrh	r3, [r3, #4]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4013      	ands	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <vBuildResponse+0x244>)
 80015be:	815a      	strh	r2, [r3, #10]
 80015c0:	201c      	movs	r0, #28
 80015c2:	f7ff fbf7 	bl	8000db4 <NVIC_DisableIRQ>
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <vBuildResponse+0x244>)
 80015c8:	88db      	ldrh	r3, [r3, #6]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <vBuildResponse+0x244>)
 80015d0:	80da      	strh	r2, [r3, #6]
 80015d2:	201c      	movs	r0, #28
 80015d4:	f7ff fbd6 	bl	8000d84 <NVIC_EnableIRQ>

		// Mode
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui8SignalMode))
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <vBuildResponse+0x244>)
 80015da:	88da      	ldrh	r2, [r3, #6]
 80015dc:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <vBuildResponse+0x244>)
 80015de:	889b      	ldrh	r3, [r3, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d302      	bcc.n	80015ea <vBuildResponse+0x18e>
  __ASM volatile ("cpsid i");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
 80015e8:	e7fe      	b.n	80015e8 <vBuildResponse+0x18c>
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <vBuildResponse+0x244>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <vBuildResponse+0x244>)
 80015f0:	8952      	ldrh	r2, [r2, #10]
 80015f2:	4413      	add	r3, r2
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	7e52      	ldrb	r2, [r2, #25]
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <vBuildResponse+0x244>)
 80015fc:	895b      	ldrh	r3, [r3, #10]
 80015fe:	3301      	adds	r3, #1
 8001600:	b29b      	uxth	r3, r3
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <vBuildResponse+0x244>)
 8001606:	889b      	ldrh	r3, [r3, #4]
 8001608:	3b01      	subs	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	b21b      	sxth	r3, r3
 800160e:	4013      	ands	r3, r2
 8001610:	b21b      	sxth	r3, r3
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <vBuildResponse+0x244>)
 8001616:	815a      	strh	r2, [r3, #10]
 8001618:	201c      	movs	r0, #28
 800161a:	f7ff fbcb 	bl	8000db4 <NVIC_DisableIRQ>
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <vBuildResponse+0x244>)
 8001620:	88db      	ldrh	r3, [r3, #6]
 8001622:	3301      	adds	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <vBuildResponse+0x244>)
 8001628:	80da      	strh	r2, [r3, #6]
 800162a:	201c      	movs	r0, #28
 800162c:	f7ff fbaa 	bl	8000d84 <NVIC_EnableIRQ>

		// Frequency
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui32SignalFrequencyMaster))
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <vBuildResponse+0x244>)
 8001632:	88da      	ldrh	r2, [r3, #6]
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <vBuildResponse+0x244>)
 8001636:	889b      	ldrh	r3, [r3, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	d302      	bcc.n	8001642 <vBuildResponse+0x1e6>
  __ASM volatile ("cpsid i");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
 8001640:	e7fe      	b.n	8001640 <vBuildResponse+0x1e4>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <vBuildResponse+0x244>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <vBuildResponse+0x244>)
 800164c:	8952      	ldrh	r2, [r2, #10]
 800164e:	4413      	add	r3, r2
 8001650:	b2ca      	uxtb	r2, r1
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <vBuildResponse+0x244>)
 8001656:	895b      	ldrh	r3, [r3, #10]
 8001658:	3301      	adds	r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <vBuildResponse+0x244>)
 8001660:	889b      	ldrh	r3, [r3, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	b21b      	sxth	r3, r3
 8001668:	4013      	ands	r3, r2
 800166a:	b21b      	sxth	r3, r3
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <vBuildResponse+0x244>)
 8001670:	815a      	strh	r2, [r3, #10]
 8001672:	201c      	movs	r0, #28
 8001674:	f7ff fb9e 	bl	8000db4 <NVIC_DisableIRQ>
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <vBuildResponse+0x244>)
 800167a:	88db      	ldrh	r3, [r3, #6]
 800167c:	3301      	adds	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <vBuildResponse+0x244>)
 8001682:	80da      	strh	r2, [r3, #6]
 8001684:	201c      	movs	r0, #28
 8001686:	f7ff fb7d 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui32SignalFrequencyMaster) >> 8)
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <vBuildResponse+0x244>)
 800168c:	88da      	ldrh	r2, [r3, #6]
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <vBuildResponse+0x244>)
 8001690:	889b      	ldrh	r3, [r3, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	d306      	bcc.n	80016a4 <vBuildResponse+0x248>
  __ASM volatile ("cpsid i");
 8001696:	b672      	cpsid	i
}
 8001698:	bf00      	nop
 800169a:	e7fe      	b.n	800169a <vBuildResponse+0x23e>
 800169c:	200005b8 	.word	0x200005b8
 80016a0:	20000600 	.word	0x20000600
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	1219      	asrs	r1, r3, #8
 80016ac:	4b86      	ldr	r3, [pc, #536]	; (80018c8 <vBuildResponse+0x46c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a85      	ldr	r2, [pc, #532]	; (80018c8 <vBuildResponse+0x46c>)
 80016b2:	8952      	ldrh	r2, [r2, #10]
 80016b4:	4413      	add	r3, r2
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	4b83      	ldr	r3, [pc, #524]	; (80018c8 <vBuildResponse+0x46c>)
 80016bc:	895b      	ldrh	r3, [r3, #10]
 80016be:	3301      	adds	r3, #1
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <vBuildResponse+0x46c>)
 80016c6:	889b      	ldrh	r3, [r3, #4]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4013      	ands	r3, r2
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b7c      	ldr	r3, [pc, #496]	; (80018c8 <vBuildResponse+0x46c>)
 80016d6:	815a      	strh	r2, [r3, #10]
 80016d8:	201c      	movs	r0, #28
 80016da:	f7ff fb6b 	bl	8000db4 <NVIC_DisableIRQ>
 80016de:	4b7a      	ldr	r3, [pc, #488]	; (80018c8 <vBuildResponse+0x46c>)
 80016e0:	88db      	ldrh	r3, [r3, #6]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b78      	ldr	r3, [pc, #480]	; (80018c8 <vBuildResponse+0x46c>)
 80016e8:	80da      	strh	r2, [r3, #6]
 80016ea:	201c      	movs	r0, #28
 80016ec:	f7ff fb4a 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui32SignalFrequencyMaster) >> 16)
 80016f0:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <vBuildResponse+0x46c>)
 80016f2:	88da      	ldrh	r2, [r3, #6]
 80016f4:	4b74      	ldr	r3, [pc, #464]	; (80018c8 <vBuildResponse+0x46c>)
 80016f6:	889b      	ldrh	r3, [r3, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d302      	bcc.n	8001702 <vBuildResponse+0x2a6>
  __ASM volatile ("cpsid i");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
 8001700:	e7fe      	b.n	8001700 <vBuildResponse+0x2a4>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	1419      	asrs	r1, r3, #16
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <vBuildResponse+0x46c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6e      	ldr	r2, [pc, #440]	; (80018c8 <vBuildResponse+0x46c>)
 8001710:	8952      	ldrh	r2, [r2, #10]
 8001712:	4413      	add	r3, r2
 8001714:	b2ca      	uxtb	r2, r1
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <vBuildResponse+0x46c>)
 800171a:	895b      	ldrh	r3, [r3, #10]
 800171c:	3301      	adds	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b69      	ldr	r3, [pc, #420]	; (80018c8 <vBuildResponse+0x46c>)
 8001724:	889b      	ldrh	r3, [r3, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	b29b      	uxth	r3, r3
 800172a:	b21b      	sxth	r3, r3
 800172c:	4013      	ands	r3, r2
 800172e:	b21b      	sxth	r3, r3
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <vBuildResponse+0x46c>)
 8001734:	815a      	strh	r2, [r3, #10]
 8001736:	201c      	movs	r0, #28
 8001738:	f7ff fb3c 	bl	8000db4 <NVIC_DisableIRQ>
 800173c:	4b62      	ldr	r3, [pc, #392]	; (80018c8 <vBuildResponse+0x46c>)
 800173e:	88db      	ldrh	r3, [r3, #6]
 8001740:	3301      	adds	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b60      	ldr	r3, [pc, #384]	; (80018c8 <vBuildResponse+0x46c>)
 8001746:	80da      	strh	r2, [r3, #6]
 8001748:	201c      	movs	r0, #28
 800174a:	f7ff fb1b 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui32SignalFrequencyMaster) >> 24)
 800174e:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <vBuildResponse+0x46c>)
 8001750:	88da      	ldrh	r2, [r3, #6]
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <vBuildResponse+0x46c>)
 8001754:	889b      	ldrh	r3, [r3, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <vBuildResponse+0x304>
  __ASM volatile ("cpsid i");
 800175a:	b672      	cpsid	i
}
 800175c:	bf00      	nop
 800175e:	e7fe      	b.n	800175e <vBuildResponse+0x302>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	1619      	asrs	r1, r3, #24
 8001768:	4b57      	ldr	r3, [pc, #348]	; (80018c8 <vBuildResponse+0x46c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a56      	ldr	r2, [pc, #344]	; (80018c8 <vBuildResponse+0x46c>)
 800176e:	8952      	ldrh	r2, [r2, #10]
 8001770:	4413      	add	r3, r2
 8001772:	b2ca      	uxtb	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <vBuildResponse+0x46c>)
 8001778:	895b      	ldrh	r3, [r3, #10]
 800177a:	3301      	adds	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	b21a      	sxth	r2, r3
 8001780:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <vBuildResponse+0x46c>)
 8001782:	889b      	ldrh	r3, [r3, #4]
 8001784:	3b01      	subs	r3, #1
 8001786:	b29b      	uxth	r3, r3
 8001788:	b21b      	sxth	r3, r3
 800178a:	4013      	ands	r3, r2
 800178c:	b21b      	sxth	r3, r3
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <vBuildResponse+0x46c>)
 8001792:	815a      	strh	r2, [r3, #10]
 8001794:	201c      	movs	r0, #28
 8001796:	f7ff fb0d 	bl	8000db4 <NVIC_DisableIRQ>
 800179a:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <vBuildResponse+0x46c>)
 800179c:	88db      	ldrh	r3, [r3, #6]
 800179e:	3301      	adds	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <vBuildResponse+0x46c>)
 80017a4:	80da      	strh	r2, [r3, #6]
 80017a6:	201c      	movs	r0, #28
 80017a8:	f7ff faec 	bl	8000d84 <NVIC_EnableIRQ>

		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui8SignalStateU))
 80017ac:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <vBuildResponse+0x46c>)
 80017ae:	88da      	ldrh	r2, [r3, #6]
 80017b0:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <vBuildResponse+0x46c>)
 80017b2:	889b      	ldrh	r3, [r3, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d302      	bcc.n	80017be <vBuildResponse+0x362>
  __ASM volatile ("cpsid i");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
 80017bc:	e7fe      	b.n	80017bc <vBuildResponse+0x360>
 80017be:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <vBuildResponse+0x46c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a41      	ldr	r2, [pc, #260]	; (80018c8 <vBuildResponse+0x46c>)
 80017c4:	8952      	ldrh	r2, [r2, #10]
 80017c6:	4413      	add	r3, r2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	7d92      	ldrb	r2, [r2, #22]
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <vBuildResponse+0x46c>)
 80017d0:	895b      	ldrh	r3, [r3, #10]
 80017d2:	3301      	adds	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <vBuildResponse+0x46c>)
 80017da:	889b      	ldrh	r3, [r3, #4]
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	4013      	ands	r3, r2
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <vBuildResponse+0x46c>)
 80017ea:	815a      	strh	r2, [r3, #10]
 80017ec:	201c      	movs	r0, #28
 80017ee:	f7ff fae1 	bl	8000db4 <NVIC_DisableIRQ>
 80017f2:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <vBuildResponse+0x46c>)
 80017f4:	88db      	ldrh	r3, [r3, #6]
 80017f6:	3301      	adds	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <vBuildResponse+0x46c>)
 80017fc:	80da      	strh	r2, [r3, #6]
 80017fe:	201c      	movs	r0, #28
 8001800:	f7ff fac0 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui8SignalStateV))
 8001804:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <vBuildResponse+0x46c>)
 8001806:	88da      	ldrh	r2, [r3, #6]
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <vBuildResponse+0x46c>)
 800180a:	889b      	ldrh	r3, [r3, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	d302      	bcc.n	8001816 <vBuildResponse+0x3ba>
  __ASM volatile ("cpsid i");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
 8001814:	e7fe      	b.n	8001814 <vBuildResponse+0x3b8>
 8001816:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <vBuildResponse+0x46c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <vBuildResponse+0x46c>)
 800181c:	8952      	ldrh	r2, [r2, #10]
 800181e:	4413      	add	r3, r2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	7dd2      	ldrb	r2, [r2, #23]
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <vBuildResponse+0x46c>)
 8001828:	895b      	ldrh	r3, [r3, #10]
 800182a:	3301      	adds	r3, #1
 800182c:	b29b      	uxth	r3, r3
 800182e:	b21a      	sxth	r2, r3
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <vBuildResponse+0x46c>)
 8001832:	889b      	ldrh	r3, [r3, #4]
 8001834:	3b01      	subs	r3, #1
 8001836:	b29b      	uxth	r3, r3
 8001838:	b21b      	sxth	r3, r3
 800183a:	4013      	ands	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <vBuildResponse+0x46c>)
 8001842:	815a      	strh	r2, [r3, #10]
 8001844:	201c      	movs	r0, #28
 8001846:	f7ff fab5 	bl	8000db4 <NVIC_DisableIRQ>
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <vBuildResponse+0x46c>)
 800184c:	88db      	ldrh	r3, [r3, #6]
 800184e:	3301      	adds	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <vBuildResponse+0x46c>)
 8001854:	80da      	strh	r2, [r3, #6]
 8001856:	201c      	movs	r0, #28
 8001858:	f7ff fa94 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui8SignalStateW))
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <vBuildResponse+0x46c>)
 800185e:	88da      	ldrh	r2, [r3, #6]
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <vBuildResponse+0x46c>)
 8001862:	889b      	ldrh	r3, [r3, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	d302      	bcc.n	800186e <vBuildResponse+0x412>
  __ASM volatile ("cpsid i");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
 800186c:	e7fe      	b.n	800186c <vBuildResponse+0x410>
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <vBuildResponse+0x46c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <vBuildResponse+0x46c>)
 8001874:	8952      	ldrh	r2, [r2, #10]
 8001876:	4413      	add	r3, r2
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	7e12      	ldrb	r2, [r2, #24]
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <vBuildResponse+0x46c>)
 8001880:	895b      	ldrh	r3, [r3, #10]
 8001882:	3301      	adds	r3, #1
 8001884:	b29b      	uxth	r3, r3
 8001886:	b21a      	sxth	r2, r3
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <vBuildResponse+0x46c>)
 800188a:	889b      	ldrh	r3, [r3, #4]
 800188c:	3b01      	subs	r3, #1
 800188e:	b29b      	uxth	r3, r3
 8001890:	b21b      	sxth	r3, r3
 8001892:	4013      	ands	r3, r2
 8001894:	b21b      	sxth	r3, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <vBuildResponse+0x46c>)
 800189a:	815a      	strh	r2, [r3, #10]
 800189c:	201c      	movs	r0, #28
 800189e:	f7ff fa89 	bl	8000db4 <NVIC_DisableIRQ>
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <vBuildResponse+0x46c>)
 80018a4:	88db      	ldrh	r3, [r3, #6]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <vBuildResponse+0x46c>)
 80018ac:	80da      	strh	r2, [r3, #6]
 80018ae:	201c      	movs	r0, #28
 80018b0:	f7ff fa68 	bl	8000d84 <NVIC_EnableIRQ>

		// Shift
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalShiftU));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <vBuildResponse+0x46c>)
 80018b6:	88da      	ldrh	r2, [r3, #6]
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <vBuildResponse+0x46c>)
 80018ba:	889b      	ldrh	r3, [r3, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d305      	bcc.n	80018cc <vBuildResponse+0x470>
  __ASM volatile ("cpsid i");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
 80018c4:	e7fe      	b.n	80018c4 <vBuildResponse+0x468>
 80018c6:	bf00      	nop
 80018c8:	20000600 	.word	0x20000600
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8a19      	ldrh	r1, [r3, #16]
 80018d0:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <vBuildResponse+0x698>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a87      	ldr	r2, [pc, #540]	; (8001af4 <vBuildResponse+0x698>)
 80018d6:	8952      	ldrh	r2, [r2, #10]
 80018d8:	4413      	add	r3, r2
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	4b85      	ldr	r3, [pc, #532]	; (8001af4 <vBuildResponse+0x698>)
 80018e0:	895b      	ldrh	r3, [r3, #10]
 80018e2:	3301      	adds	r3, #1
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	4b82      	ldr	r3, [pc, #520]	; (8001af4 <vBuildResponse+0x698>)
 80018ea:	889b      	ldrh	r3, [r3, #4]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4013      	ands	r3, r2
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b7e      	ldr	r3, [pc, #504]	; (8001af4 <vBuildResponse+0x698>)
 80018fa:	815a      	strh	r2, [r3, #10]
 80018fc:	201c      	movs	r0, #28
 80018fe:	f7ff fa59 	bl	8000db4 <NVIC_DisableIRQ>
 8001902:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <vBuildResponse+0x698>)
 8001904:	88db      	ldrh	r3, [r3, #6]
 8001906:	3301      	adds	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	4b7a      	ldr	r3, [pc, #488]	; (8001af4 <vBuildResponse+0x698>)
 800190c:	80da      	strh	r2, [r3, #6]
 800190e:	201c      	movs	r0, #28
 8001910:	f7ff fa38 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalShiftU) >> 8);
 8001914:	4b77      	ldr	r3, [pc, #476]	; (8001af4 <vBuildResponse+0x698>)
 8001916:	88da      	ldrh	r2, [r3, #6]
 8001918:	4b76      	ldr	r3, [pc, #472]	; (8001af4 <vBuildResponse+0x698>)
 800191a:	889b      	ldrh	r3, [r3, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	d302      	bcc.n	8001926 <vBuildResponse+0x4ca>
  __ASM volatile ("cpsid i");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
 8001924:	e7fe      	b.n	8001924 <vBuildResponse+0x4c8>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8a1b      	ldrh	r3, [r3, #16]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	1219      	asrs	r1, r3, #8
 800192e:	4b71      	ldr	r3, [pc, #452]	; (8001af4 <vBuildResponse+0x698>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a70      	ldr	r2, [pc, #448]	; (8001af4 <vBuildResponse+0x698>)
 8001934:	8952      	ldrh	r2, [r2, #10]
 8001936:	4413      	add	r3, r2
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	4b6d      	ldr	r3, [pc, #436]	; (8001af4 <vBuildResponse+0x698>)
 800193e:	895b      	ldrh	r3, [r3, #10]
 8001940:	3301      	adds	r3, #1
 8001942:	b29b      	uxth	r3, r3
 8001944:	b21a      	sxth	r2, r3
 8001946:	4b6b      	ldr	r3, [pc, #428]	; (8001af4 <vBuildResponse+0x698>)
 8001948:	889b      	ldrh	r3, [r3, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	4013      	ands	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <vBuildResponse+0x698>)
 8001958:	815a      	strh	r2, [r3, #10]
 800195a:	201c      	movs	r0, #28
 800195c:	f7ff fa2a 	bl	8000db4 <NVIC_DisableIRQ>
 8001960:	4b64      	ldr	r3, [pc, #400]	; (8001af4 <vBuildResponse+0x698>)
 8001962:	88db      	ldrh	r3, [r3, #6]
 8001964:	3301      	adds	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b62      	ldr	r3, [pc, #392]	; (8001af4 <vBuildResponse+0x698>)
 800196a:	80da      	strh	r2, [r3, #6]
 800196c:	201c      	movs	r0, #28
 800196e:	f7ff fa09 	bl	8000d84 <NVIC_EnableIRQ>

		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalShiftV));
 8001972:	4b60      	ldr	r3, [pc, #384]	; (8001af4 <vBuildResponse+0x698>)
 8001974:	88da      	ldrh	r2, [r3, #6]
 8001976:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <vBuildResponse+0x698>)
 8001978:	889b      	ldrh	r3, [r3, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d302      	bcc.n	8001984 <vBuildResponse+0x528>
  __ASM volatile ("cpsid i");
 800197e:	b672      	cpsid	i
}
 8001980:	bf00      	nop
 8001982:	e7fe      	b.n	8001982 <vBuildResponse+0x526>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8a59      	ldrh	r1, [r3, #18]
 8001988:	4b5a      	ldr	r3, [pc, #360]	; (8001af4 <vBuildResponse+0x698>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a59      	ldr	r2, [pc, #356]	; (8001af4 <vBuildResponse+0x698>)
 800198e:	8952      	ldrh	r2, [r2, #10]
 8001990:	4413      	add	r3, r2
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <vBuildResponse+0x698>)
 8001998:	895b      	ldrh	r3, [r3, #10]
 800199a:	3301      	adds	r3, #1
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21a      	sxth	r2, r3
 80019a0:	4b54      	ldr	r3, [pc, #336]	; (8001af4 <vBuildResponse+0x698>)
 80019a2:	889b      	ldrh	r3, [r3, #4]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4013      	ands	r3, r2
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <vBuildResponse+0x698>)
 80019b2:	815a      	strh	r2, [r3, #10]
 80019b4:	201c      	movs	r0, #28
 80019b6:	f7ff f9fd 	bl	8000db4 <NVIC_DisableIRQ>
 80019ba:	4b4e      	ldr	r3, [pc, #312]	; (8001af4 <vBuildResponse+0x698>)
 80019bc:	88db      	ldrh	r3, [r3, #6]
 80019be:	3301      	adds	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <vBuildResponse+0x698>)
 80019c4:	80da      	strh	r2, [r3, #6]
 80019c6:	201c      	movs	r0, #28
 80019c8:	f7ff f9dc 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalShiftV) >> 8);
 80019cc:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <vBuildResponse+0x698>)
 80019ce:	88da      	ldrh	r2, [r3, #6]
 80019d0:	4b48      	ldr	r3, [pc, #288]	; (8001af4 <vBuildResponse+0x698>)
 80019d2:	889b      	ldrh	r3, [r3, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d302      	bcc.n	80019de <vBuildResponse+0x582>
  __ASM volatile ("cpsid i");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
 80019dc:	e7fe      	b.n	80019dc <vBuildResponse+0x580>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8a5b      	ldrh	r3, [r3, #18]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	1219      	asrs	r1, r3, #8
 80019e6:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <vBuildResponse+0x698>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <vBuildResponse+0x698>)
 80019ec:	8952      	ldrh	r2, [r2, #10]
 80019ee:	4413      	add	r3, r2
 80019f0:	b2ca      	uxtb	r2, r1
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <vBuildResponse+0x698>)
 80019f6:	895b      	ldrh	r3, [r3, #10]
 80019f8:	3301      	adds	r3, #1
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <vBuildResponse+0x698>)
 8001a00:	889b      	ldrh	r3, [r3, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <vBuildResponse+0x698>)
 8001a10:	815a      	strh	r2, [r3, #10]
 8001a12:	201c      	movs	r0, #28
 8001a14:	f7ff f9ce 	bl	8000db4 <NVIC_DisableIRQ>
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <vBuildResponse+0x698>)
 8001a1a:	88db      	ldrh	r3, [r3, #6]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <vBuildResponse+0x698>)
 8001a22:	80da      	strh	r2, [r3, #6]
 8001a24:	201c      	movs	r0, #28
 8001a26:	f7ff f9ad 	bl	8000d84 <NVIC_EnableIRQ>

		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalShiftW));
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <vBuildResponse+0x698>)
 8001a2c:	88da      	ldrh	r2, [r3, #6]
 8001a2e:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <vBuildResponse+0x698>)
 8001a30:	889b      	ldrh	r3, [r3, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d302      	bcc.n	8001a3c <vBuildResponse+0x5e0>
  __ASM volatile ("cpsid i");
 8001a36:	b672      	cpsid	i
}
 8001a38:	bf00      	nop
 8001a3a:	e7fe      	b.n	8001a3a <vBuildResponse+0x5de>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8a99      	ldrh	r1, [r3, #20]
 8001a40:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <vBuildResponse+0x698>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2b      	ldr	r2, [pc, #172]	; (8001af4 <vBuildResponse+0x698>)
 8001a46:	8952      	ldrh	r2, [r2, #10]
 8001a48:	4413      	add	r3, r2
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <vBuildResponse+0x698>)
 8001a50:	895b      	ldrh	r3, [r3, #10]
 8001a52:	3301      	adds	r3, #1
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <vBuildResponse+0x698>)
 8001a5a:	889b      	ldrh	r3, [r3, #4]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	4013      	ands	r3, r2
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <vBuildResponse+0x698>)
 8001a6a:	815a      	strh	r2, [r3, #10]
 8001a6c:	201c      	movs	r0, #28
 8001a6e:	f7ff f9a1 	bl	8000db4 <NVIC_DisableIRQ>
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <vBuildResponse+0x698>)
 8001a74:	88db      	ldrh	r3, [r3, #6]
 8001a76:	3301      	adds	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <vBuildResponse+0x698>)
 8001a7c:	80da      	strh	r2, [r3, #6]
 8001a7e:	201c      	movs	r0, #28
 8001a80:	f7ff f980 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalShiftW) >> 8);
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <vBuildResponse+0x698>)
 8001a86:	88da      	ldrh	r2, [r3, #6]
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <vBuildResponse+0x698>)
 8001a8a:	889b      	ldrh	r3, [r3, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d302      	bcc.n	8001a96 <vBuildResponse+0x63a>
  __ASM volatile ("cpsid i");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
 8001a94:	e7fe      	b.n	8001a94 <vBuildResponse+0x638>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8a9b      	ldrh	r3, [r3, #20]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	1219      	asrs	r1, r3, #8
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <vBuildResponse+0x698>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <vBuildResponse+0x698>)
 8001aa4:	8952      	ldrh	r2, [r2, #10]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2ca      	uxtb	r2, r1
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <vBuildResponse+0x698>)
 8001aae:	895b      	ldrh	r3, [r3, #10]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <vBuildResponse+0x698>)
 8001ab8:	889b      	ldrh	r3, [r3, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <vBuildResponse+0x698>)
 8001ac8:	815a      	strh	r2, [r3, #10]
 8001aca:	201c      	movs	r0, #28
 8001acc:	f7ff f972 	bl	8000db4 <NVIC_DisableIRQ>
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <vBuildResponse+0x698>)
 8001ad2:	88db      	ldrh	r3, [r3, #6]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <vBuildResponse+0x698>)
 8001ada:	80da      	strh	r2, [r3, #6]
 8001adc:	201c      	movs	r0, #28
 8001ade:	f7ff f951 	bl	8000d84 <NVIC_EnableIRQ>

		// Amplitude
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalAmplitudeU));
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <vBuildResponse+0x698>)
 8001ae4:	88da      	ldrh	r2, [r3, #6]
 8001ae6:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <vBuildResponse+0x698>)
 8001ae8:	889b      	ldrh	r3, [r3, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d304      	bcc.n	8001af8 <vBuildResponse+0x69c>
  __ASM volatile ("cpsid i");
 8001aee:	b672      	cpsid	i
}
 8001af0:	bf00      	nop
 8001af2:	e7fe      	b.n	8001af2 <vBuildResponse+0x696>
 8001af4:	20000600 	.word	0x20000600
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8899      	ldrh	r1, [r3, #4]
 8001afc:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <vBuildResponse+0x8c4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a87      	ldr	r2, [pc, #540]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b02:	8952      	ldrh	r2, [r2, #10]
 8001b04:	4413      	add	r3, r2
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	4b85      	ldr	r3, [pc, #532]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b0c:	895b      	ldrh	r3, [r3, #10]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	4b82      	ldr	r3, [pc, #520]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b16:	889b      	ldrh	r3, [r3, #4]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4013      	ands	r3, r2
 8001b20:	b21b      	sxth	r3, r3
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b7e      	ldr	r3, [pc, #504]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b26:	815a      	strh	r2, [r3, #10]
 8001b28:	201c      	movs	r0, #28
 8001b2a:	f7ff f943 	bl	8000db4 <NVIC_DisableIRQ>
 8001b2e:	4b7c      	ldr	r3, [pc, #496]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b30:	88db      	ldrh	r3, [r3, #6]
 8001b32:	3301      	adds	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b38:	80da      	strh	r2, [r3, #6]
 8001b3a:	201c      	movs	r0, #28
 8001b3c:	f7ff f922 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalAmplitudeU) >> 8);
 8001b40:	4b77      	ldr	r3, [pc, #476]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b42:	88da      	ldrh	r2, [r3, #6]
 8001b44:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b46:	889b      	ldrh	r3, [r3, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d302      	bcc.n	8001b52 <vBuildResponse+0x6f6>
  __ASM volatile ("cpsid i");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
 8001b50:	e7fe      	b.n	8001b50 <vBuildResponse+0x6f4>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	889b      	ldrh	r3, [r3, #4]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	1219      	asrs	r1, r3, #8
 8001b5a:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a70      	ldr	r2, [pc, #448]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b60:	8952      	ldrh	r2, [r2, #10]
 8001b62:	4413      	add	r3, r2
 8001b64:	b2ca      	uxtb	r2, r1
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b6a:	895b      	ldrh	r3, [r3, #10]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	4b6b      	ldr	r3, [pc, #428]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b74:	889b      	ldrh	r3, [r3, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b84:	815a      	strh	r2, [r3, #10]
 8001b86:	201c      	movs	r0, #28
 8001b88:	f7ff f914 	bl	8000db4 <NVIC_DisableIRQ>
 8001b8c:	4b64      	ldr	r3, [pc, #400]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b8e:	88db      	ldrh	r3, [r3, #6]
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <vBuildResponse+0x8c4>)
 8001b96:	80da      	strh	r2, [r3, #6]
 8001b98:	201c      	movs	r0, #28
 8001b9a:	f7ff f8f3 	bl	8000d84 <NVIC_EnableIRQ>

		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalAmplitudeV));
 8001b9e:	4b60      	ldr	r3, [pc, #384]	; (8001d20 <vBuildResponse+0x8c4>)
 8001ba0:	88da      	ldrh	r2, [r3, #6]
 8001ba2:	4b5f      	ldr	r3, [pc, #380]	; (8001d20 <vBuildResponse+0x8c4>)
 8001ba4:	889b      	ldrh	r3, [r3, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d302      	bcc.n	8001bb0 <vBuildResponse+0x754>
  __ASM volatile ("cpsid i");
 8001baa:	b672      	cpsid	i
}
 8001bac:	bf00      	nop
 8001bae:	e7fe      	b.n	8001bae <vBuildResponse+0x752>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	88d9      	ldrh	r1, [r3, #6]
 8001bb4:	4b5a      	ldr	r3, [pc, #360]	; (8001d20 <vBuildResponse+0x8c4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a59      	ldr	r2, [pc, #356]	; (8001d20 <vBuildResponse+0x8c4>)
 8001bba:	8952      	ldrh	r2, [r2, #10]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <vBuildResponse+0x8c4>)
 8001bc4:	895b      	ldrh	r3, [r3, #10]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <vBuildResponse+0x8c4>)
 8001bce:	889b      	ldrh	r3, [r3, #4]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <vBuildResponse+0x8c4>)
 8001bde:	815a      	strh	r2, [r3, #10]
 8001be0:	201c      	movs	r0, #28
 8001be2:	f7ff f8e7 	bl	8000db4 <NVIC_DisableIRQ>
 8001be6:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <vBuildResponse+0x8c4>)
 8001be8:	88db      	ldrh	r3, [r3, #6]
 8001bea:	3301      	adds	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <vBuildResponse+0x8c4>)
 8001bf0:	80da      	strh	r2, [r3, #6]
 8001bf2:	201c      	movs	r0, #28
 8001bf4:	f7ff f8c6 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalAmplitudeV) >> 8);
 8001bf8:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <vBuildResponse+0x8c4>)
 8001bfa:	88da      	ldrh	r2, [r3, #6]
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <vBuildResponse+0x8c4>)
 8001bfe:	889b      	ldrh	r3, [r3, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d302      	bcc.n	8001c0a <vBuildResponse+0x7ae>
  __ASM volatile ("cpsid i");
 8001c04:	b672      	cpsid	i
}
 8001c06:	bf00      	nop
 8001c08:	e7fe      	b.n	8001c08 <vBuildResponse+0x7ac>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	88db      	ldrh	r3, [r3, #6]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	1219      	asrs	r1, r3, #8
 8001c12:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a42      	ldr	r2, [pc, #264]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c18:	8952      	ldrh	r2, [r2, #10]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c22:	895b      	ldrh	r3, [r3, #10]
 8001c24:	3301      	adds	r3, #1
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c2c:	889b      	ldrh	r3, [r3, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	4013      	ands	r3, r2
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c3c:	815a      	strh	r2, [r3, #10]
 8001c3e:	201c      	movs	r0, #28
 8001c40:	f7ff f8b8 	bl	8000db4 <NVIC_DisableIRQ>
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c46:	88db      	ldrh	r3, [r3, #6]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c4e:	80da      	strh	r2, [r3, #6]
 8001c50:	201c      	movs	r0, #28
 8001c52:	f7ff f897 	bl	8000d84 <NVIC_EnableIRQ>

		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalAmplitudeW));
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c58:	88da      	ldrh	r2, [r3, #6]
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c5c:	889b      	ldrh	r3, [r3, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d302      	bcc.n	8001c68 <vBuildResponse+0x80c>
  __ASM volatile ("cpsid i");
 8001c62:	b672      	cpsid	i
}
 8001c64:	bf00      	nop
 8001c66:	e7fe      	b.n	8001c66 <vBuildResponse+0x80a>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8919      	ldrh	r1, [r3, #8]
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c72:	8952      	ldrh	r2, [r2, #10]
 8001c74:	4413      	add	r3, r2
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c7c:	895b      	ldrh	r3, [r3, #10]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	4013      	ands	r3, r2
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <vBuildResponse+0x8c4>)
 8001c96:	815a      	strh	r2, [r3, #10]
 8001c98:	201c      	movs	r0, #28
 8001c9a:	f7ff f88b 	bl	8000db4 <NVIC_DisableIRQ>
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <vBuildResponse+0x8c4>)
 8001ca0:	88db      	ldrh	r3, [r3, #6]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <vBuildResponse+0x8c4>)
 8001ca8:	80da      	strh	r2, [r3, #6]
 8001caa:	201c      	movs	r0, #28
 8001cac:	f7ff f86a 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalAmplitudeW) >> 8);
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <vBuildResponse+0x8c4>)
 8001cb2:	88da      	ldrh	r2, [r3, #6]
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <vBuildResponse+0x8c4>)
 8001cb6:	889b      	ldrh	r3, [r3, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d302      	bcc.n	8001cc2 <vBuildResponse+0x866>
  __ASM volatile ("cpsid i");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
 8001cc0:	e7fe      	b.n	8001cc0 <vBuildResponse+0x864>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	891b      	ldrh	r3, [r3, #8]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	1219      	asrs	r1, r3, #8
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <vBuildResponse+0x8c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <vBuildResponse+0x8c4>)
 8001cd0:	8952      	ldrh	r2, [r2, #10]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2ca      	uxtb	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <vBuildResponse+0x8c4>)
 8001cda:	895b      	ldrh	r3, [r3, #10]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <vBuildResponse+0x8c4>)
 8001ce4:	889b      	ldrh	r3, [r3, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	4013      	ands	r3, r2
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <vBuildResponse+0x8c4>)
 8001cf4:	815a      	strh	r2, [r3, #10]
 8001cf6:	201c      	movs	r0, #28
 8001cf8:	f7ff f85c 	bl	8000db4 <NVIC_DisableIRQ>
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <vBuildResponse+0x8c4>)
 8001cfe:	88db      	ldrh	r3, [r3, #6]
 8001d00:	3301      	adds	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <vBuildResponse+0x8c4>)
 8001d06:	80da      	strh	r2, [r3, #6]
 8001d08:	201c      	movs	r0, #28
 8001d0a:	f7ff f83b 	bl	8000d84 <NVIC_EnableIRQ>

		// VOffset
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalOffsetU));
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <vBuildResponse+0x8c4>)
 8001d10:	88da      	ldrh	r2, [r3, #6]
 8001d12:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <vBuildResponse+0x8c4>)
 8001d14:	889b      	ldrh	r3, [r3, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d304      	bcc.n	8001d24 <vBuildResponse+0x8c8>
  __ASM volatile ("cpsid i");
 8001d1a:	b672      	cpsid	i
}
 8001d1c:	bf00      	nop
 8001d1e:	e7fe      	b.n	8001d1e <vBuildResponse+0x8c2>
 8001d20:	20000600 	.word	0x20000600
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8959      	ldrh	r1, [r3, #10]
 8001d28:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a88      	ldr	r2, [pc, #544]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d2e:	8952      	ldrh	r2, [r2, #10]
 8001d30:	4413      	add	r3, r2
 8001d32:	b2ca      	uxtb	r2, r1
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	4b86      	ldr	r3, [pc, #536]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d38:	895b      	ldrh	r3, [r3, #10]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	4b83      	ldr	r3, [pc, #524]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d42:	889b      	ldrh	r3, [r3, #4]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d52:	815a      	strh	r2, [r3, #10]
 8001d54:	201c      	movs	r0, #28
 8001d56:	f7ff f82d 	bl	8000db4 <NVIC_DisableIRQ>
 8001d5a:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d5c:	88db      	ldrh	r3, [r3, #6]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d64:	80da      	strh	r2, [r3, #6]
 8001d66:	201c      	movs	r0, #28
 8001d68:	f7ff f80c 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalOffsetU) >> 8);
 8001d6c:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d6e:	88da      	ldrh	r2, [r3, #6]
 8001d70:	4b77      	ldr	r3, [pc, #476]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d302      	bcc.n	8001d7e <vBuildResponse+0x922>
  __ASM volatile ("cpsid i");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
 8001d7c:	e7fe      	b.n	8001d7c <vBuildResponse+0x920>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	895b      	ldrh	r3, [r3, #10]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	1219      	asrs	r1, r3, #8
 8001d86:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a71      	ldr	r2, [pc, #452]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d8c:	8952      	ldrh	r2, [r2, #10]
 8001d8e:	4413      	add	r3, r2
 8001d90:	b2ca      	uxtb	r2, r1
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <vBuildResponse+0xaf4>)
 8001d96:	895b      	ldrh	r3, [r3, #10]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <vBuildResponse+0xaf4>)
 8001da0:	889b      	ldrh	r3, [r3, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	4013      	ands	r3, r2
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b68      	ldr	r3, [pc, #416]	; (8001f50 <vBuildResponse+0xaf4>)
 8001db0:	815a      	strh	r2, [r3, #10]
 8001db2:	201c      	movs	r0, #28
 8001db4:	f7fe fffe 	bl	8000db4 <NVIC_DisableIRQ>
 8001db8:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <vBuildResponse+0xaf4>)
 8001dba:	88db      	ldrh	r3, [r3, #6]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <vBuildResponse+0xaf4>)
 8001dc2:	80da      	strh	r2, [r3, #6]
 8001dc4:	201c      	movs	r0, #28
 8001dc6:	f7fe ffdd 	bl	8000d84 <NVIC_EnableIRQ>

		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalOffsetV));
 8001dca:	4b61      	ldr	r3, [pc, #388]	; (8001f50 <vBuildResponse+0xaf4>)
 8001dcc:	88da      	ldrh	r2, [r3, #6]
 8001dce:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <vBuildResponse+0xaf4>)
 8001dd0:	889b      	ldrh	r3, [r3, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d302      	bcc.n	8001ddc <vBuildResponse+0x980>
  __ASM volatile ("cpsid i");
 8001dd6:	b672      	cpsid	i
}
 8001dd8:	bf00      	nop
 8001dda:	e7fe      	b.n	8001dda <vBuildResponse+0x97e>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8999      	ldrh	r1, [r3, #12]
 8001de0:	4b5b      	ldr	r3, [pc, #364]	; (8001f50 <vBuildResponse+0xaf4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a5a      	ldr	r2, [pc, #360]	; (8001f50 <vBuildResponse+0xaf4>)
 8001de6:	8952      	ldrh	r2, [r2, #10]
 8001de8:	4413      	add	r3, r2
 8001dea:	b2ca      	uxtb	r2, r1
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <vBuildResponse+0xaf4>)
 8001df0:	895b      	ldrh	r3, [r3, #10]
 8001df2:	3301      	adds	r3, #1
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <vBuildResponse+0xaf4>)
 8001dfa:	889b      	ldrh	r3, [r3, #4]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	4013      	ands	r3, r2
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e0a:	815a      	strh	r2, [r3, #10]
 8001e0c:	201c      	movs	r0, #28
 8001e0e:	f7fe ffd1 	bl	8000db4 <NVIC_DisableIRQ>
 8001e12:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e14:	88db      	ldrh	r3, [r3, #6]
 8001e16:	3301      	adds	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e1c:	80da      	strh	r2, [r3, #6]
 8001e1e:	201c      	movs	r0, #28
 8001e20:	f7fe ffb0 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalOffsetV) >> 8);
 8001e24:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e26:	88da      	ldrh	r2, [r3, #6]
 8001e28:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e2a:	889b      	ldrh	r3, [r3, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d302      	bcc.n	8001e36 <vBuildResponse+0x9da>
  __ASM volatile ("cpsid i");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
 8001e34:	e7fe      	b.n	8001e34 <vBuildResponse+0x9d8>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	899b      	ldrh	r3, [r3, #12]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	1219      	asrs	r1, r3, #8
 8001e3e:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a43      	ldr	r2, [pc, #268]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e44:	8952      	ldrh	r2, [r2, #10]
 8001e46:	4413      	add	r3, r2
 8001e48:	b2ca      	uxtb	r2, r1
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e4e:	895b      	ldrh	r3, [r3, #10]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e58:	889b      	ldrh	r3, [r3, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	4013      	ands	r3, r2
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e68:	815a      	strh	r2, [r3, #10]
 8001e6a:	201c      	movs	r0, #28
 8001e6c:	f7fe ffa2 	bl	8000db4 <NVIC_DisableIRQ>
 8001e70:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e72:	88db      	ldrh	r3, [r3, #6]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e7a:	80da      	strh	r2, [r3, #6]
 8001e7c:	201c      	movs	r0, #28
 8001e7e:	f7fe ff81 	bl	8000d84 <NVIC_EnableIRQ>

		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalOffsetW));
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e84:	88da      	ldrh	r2, [r3, #6]
 8001e86:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e88:	889b      	ldrh	r3, [r3, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <vBuildResponse+0xa38>
  __ASM volatile ("cpsid i");
 8001e8e:	b672      	cpsid	i
}
 8001e90:	bf00      	nop
 8001e92:	e7fe      	b.n	8001e92 <vBuildResponse+0xa36>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	89d9      	ldrh	r1, [r3, #14]
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <vBuildResponse+0xaf4>)
 8001e9e:	8952      	ldrh	r2, [r2, #10]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <vBuildResponse+0xaf4>)
 8001ea8:	895b      	ldrh	r3, [r3, #10]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <vBuildResponse+0xaf4>)
 8001eb2:	889b      	ldrh	r3, [r3, #4]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <vBuildResponse+0xaf4>)
 8001ec2:	815a      	strh	r2, [r3, #10]
 8001ec4:	201c      	movs	r0, #28
 8001ec6:	f7fe ff75 	bl	8000db4 <NVIC_DisableIRQ>
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <vBuildResponse+0xaf4>)
 8001ecc:	88db      	ldrh	r3, [r3, #6]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <vBuildResponse+0xaf4>)
 8001ed4:	80da      	strh	r2, [r3, #6]
 8001ed6:	201c      	movs	r0, #28
 8001ed8:	f7fe ff54 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (pconfiguration->ui16SignalOffsetW) >> 8);
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <vBuildResponse+0xaf4>)
 8001ede:	88da      	ldrh	r2, [r3, #6]
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <vBuildResponse+0xaf4>)
 8001ee2:	889b      	ldrh	r3, [r3, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d302      	bcc.n	8001eee <vBuildResponse+0xa92>
  __ASM volatile ("cpsid i");
 8001ee8:	b672      	cpsid	i
}
 8001eea:	bf00      	nop
 8001eec:	e7fe      	b.n	8001eec <vBuildResponse+0xa90>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	89db      	ldrh	r3, [r3, #14]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	1219      	asrs	r1, r3, #8
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <vBuildResponse+0xaf4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <vBuildResponse+0xaf4>)
 8001efc:	8952      	ldrh	r2, [r2, #10]
 8001efe:	4413      	add	r3, r2
 8001f00:	b2ca      	uxtb	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <vBuildResponse+0xaf4>)
 8001f06:	895b      	ldrh	r3, [r3, #10]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <vBuildResponse+0xaf4>)
 8001f10:	889b      	ldrh	r3, [r3, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	4013      	ands	r3, r2
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <vBuildResponse+0xaf4>)
 8001f20:	815a      	strh	r2, [r3, #10]
 8001f22:	201c      	movs	r0, #28
 8001f24:	f7fe ff46 	bl	8000db4 <NVIC_DisableIRQ>
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <vBuildResponse+0xaf4>)
 8001f2a:	88db      	ldrh	r3, [r3, #6]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <vBuildResponse+0xaf4>)
 8001f32:	80da      	strh	r2, [r3, #6]
 8001f34:	201c      	movs	r0, #28
 8001f36:	f7fe ff25 	bl	8000d84 <NVIC_EnableIRQ>
	if (ui16state == CMD_GET_ALL && !ui8error) {
 8001f3a:	e0de      	b.n	80020fa <vBuildResponse+0xc9e>
	} else {
		dPutByteIntoQueue(stcQueueTx, 5);
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <vBuildResponse+0xaf4>)
 8001f3e:	88da      	ldrh	r2, [r3, #6]
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <vBuildResponse+0xaf4>)
 8001f42:	889b      	ldrh	r3, [r3, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d305      	bcc.n	8001f54 <vBuildResponse+0xaf8>
  __ASM volatile ("cpsid i");
 8001f48:	b672      	cpsid	i
}
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <vBuildResponse+0xaf0>
 8001f4e:	bf00      	nop
 8001f50:	20000600 	.word	0x20000600
 8001f54:	4b6b      	ldr	r3, [pc, #428]	; (8002104 <vBuildResponse+0xca8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6a      	ldr	r2, [pc, #424]	; (8002104 <vBuildResponse+0xca8>)
 8001f5a:	8952      	ldrh	r2, [r2, #10]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2205      	movs	r2, #5
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	4b68      	ldr	r3, [pc, #416]	; (8002104 <vBuildResponse+0xca8>)
 8001f64:	895b      	ldrh	r3, [r3, #10]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	4b65      	ldr	r3, [pc, #404]	; (8002104 <vBuildResponse+0xca8>)
 8001f6e:	889b      	ldrh	r3, [r3, #4]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4013      	ands	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b61      	ldr	r3, [pc, #388]	; (8002104 <vBuildResponse+0xca8>)
 8001f7e:	815a      	strh	r2, [r3, #10]
 8001f80:	201c      	movs	r0, #28
 8001f82:	f7fe ff17 	bl	8000db4 <NVIC_DisableIRQ>
 8001f86:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <vBuildResponse+0xca8>)
 8001f88:	88db      	ldrh	r3, [r3, #6]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <vBuildResponse+0xca8>)
 8001f90:	80da      	strh	r2, [r3, #6]
 8001f92:	201c      	movs	r0, #28
 8001f94:	f7fe fef6 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) (ui16state >> 8));
 8001f98:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <vBuildResponse+0xca8>)
 8001f9a:	88da      	ldrh	r2, [r3, #6]
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <vBuildResponse+0xca8>)
 8001f9e:	889b      	ldrh	r3, [r3, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d302      	bcc.n	8001faa <vBuildResponse+0xb4e>
  __ASM volatile ("cpsid i");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	bf00      	nop
 8001fa8:	e7fe      	b.n	8001fa8 <vBuildResponse+0xb4c>
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	b299      	uxth	r1, r3
 8001fb0:	4b54      	ldr	r3, [pc, #336]	; (8002104 <vBuildResponse+0xca8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a53      	ldr	r2, [pc, #332]	; (8002104 <vBuildResponse+0xca8>)
 8001fb6:	8952      	ldrh	r2, [r2, #10]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	4b51      	ldr	r3, [pc, #324]	; (8002104 <vBuildResponse+0xca8>)
 8001fc0:	895b      	ldrh	r3, [r3, #10]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <vBuildResponse+0xca8>)
 8001fca:	889b      	ldrh	r3, [r3, #4]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <vBuildResponse+0xca8>)
 8001fda:	815a      	strh	r2, [r3, #10]
 8001fdc:	201c      	movs	r0, #28
 8001fde:	f7fe fee9 	bl	8000db4 <NVIC_DisableIRQ>
 8001fe2:	4b48      	ldr	r3, [pc, #288]	; (8002104 <vBuildResponse+0xca8>)
 8001fe4:	88db      	ldrh	r3, [r3, #6]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b46      	ldr	r3, [pc, #280]	; (8002104 <vBuildResponse+0xca8>)
 8001fec:	80da      	strh	r2, [r3, #6]
 8001fee:	201c      	movs	r0, #28
 8001ff0:	f7fe fec8 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, (uint8_t ) ui16state);
 8001ff4:	4b43      	ldr	r3, [pc, #268]	; (8002104 <vBuildResponse+0xca8>)
 8001ff6:	88da      	ldrh	r2, [r3, #6]
 8001ff8:	4b42      	ldr	r3, [pc, #264]	; (8002104 <vBuildResponse+0xca8>)
 8001ffa:	889b      	ldrh	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d302      	bcc.n	8002006 <vBuildResponse+0xbaa>
  __ASM volatile ("cpsid i");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
 8002004:	e7fe      	b.n	8002004 <vBuildResponse+0xba8>
 8002006:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <vBuildResponse+0xca8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a3e      	ldr	r2, [pc, #248]	; (8002104 <vBuildResponse+0xca8>)
 800200c:	8952      	ldrh	r2, [r2, #10]
 800200e:	4413      	add	r3, r2
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <vBuildResponse+0xca8>)
 8002018:	895b      	ldrh	r3, [r3, #10]
 800201a:	3301      	adds	r3, #1
 800201c:	b29b      	uxth	r3, r3
 800201e:	b21a      	sxth	r2, r3
 8002020:	4b38      	ldr	r3, [pc, #224]	; (8002104 <vBuildResponse+0xca8>)
 8002022:	889b      	ldrh	r3, [r3, #4]
 8002024:	3b01      	subs	r3, #1
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21b      	sxth	r3, r3
 800202a:	4013      	ands	r3, r2
 800202c:	b21b      	sxth	r3, r3
 800202e:	b29a      	uxth	r2, r3
 8002030:	4b34      	ldr	r3, [pc, #208]	; (8002104 <vBuildResponse+0xca8>)
 8002032:	815a      	strh	r2, [r3, #10]
 8002034:	201c      	movs	r0, #28
 8002036:	f7fe febd 	bl	8000db4 <NVIC_DisableIRQ>
 800203a:	4b32      	ldr	r3, [pc, #200]	; (8002104 <vBuildResponse+0xca8>)
 800203c:	88db      	ldrh	r3, [r3, #6]
 800203e:	3301      	adds	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <vBuildResponse+0xca8>)
 8002044:	80da      	strh	r2, [r3, #6]
 8002046:	201c      	movs	r0, #28
 8002048:	f7fe fe9c 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, ui8error);
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <vBuildResponse+0xca8>)
 800204e:	88da      	ldrh	r2, [r3, #6]
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <vBuildResponse+0xca8>)
 8002052:	889b      	ldrh	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <vBuildResponse+0xc02>
  __ASM volatile ("cpsid i");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
 800205c:	e7fe      	b.n	800205c <vBuildResponse+0xc00>
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <vBuildResponse+0xca8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a28      	ldr	r2, [pc, #160]	; (8002104 <vBuildResponse+0xca8>)
 8002064:	8952      	ldrh	r2, [r2, #10]
 8002066:	4413      	add	r3, r2
 8002068:	797a      	ldrb	r2, [r7, #5]
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <vBuildResponse+0xca8>)
 800206e:	895b      	ldrh	r3, [r3, #10]
 8002070:	3301      	adds	r3, #1
 8002072:	b29b      	uxth	r3, r3
 8002074:	b21a      	sxth	r2, r3
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <vBuildResponse+0xca8>)
 8002078:	889b      	ldrh	r3, [r3, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	b29b      	uxth	r3, r3
 800207e:	b21b      	sxth	r3, r3
 8002080:	4013      	ands	r3, r2
 8002082:	b21b      	sxth	r3, r3
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <vBuildResponse+0xca8>)
 8002088:	815a      	strh	r2, [r3, #10]
 800208a:	201c      	movs	r0, #28
 800208c:	f7fe fe92 	bl	8000db4 <NVIC_DisableIRQ>
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <vBuildResponse+0xca8>)
 8002092:	88db      	ldrh	r3, [r3, #6]
 8002094:	3301      	adds	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <vBuildResponse+0xca8>)
 800209a:	80da      	strh	r2, [r3, #6]
 800209c:	201c      	movs	r0, #28
 800209e:	f7fe fe71 	bl	8000d84 <NVIC_EnableIRQ>
		dPutByteIntoQueue(stcQueueTx, 0);
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <vBuildResponse+0xca8>)
 80020a4:	88da      	ldrh	r2, [r3, #6]
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <vBuildResponse+0xca8>)
 80020a8:	889b      	ldrh	r3, [r3, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d302      	bcc.n	80020b4 <vBuildResponse+0xc58>
  __ASM volatile ("cpsid i");
 80020ae:	b672      	cpsid	i
}
 80020b0:	bf00      	nop
 80020b2:	e7fe      	b.n	80020b2 <vBuildResponse+0xc56>
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <vBuildResponse+0xca8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <vBuildResponse+0xca8>)
 80020ba:	8952      	ldrh	r2, [r2, #10]
 80020bc:	4413      	add	r3, r2
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <vBuildResponse+0xca8>)
 80020c4:	895b      	ldrh	r3, [r3, #10]
 80020c6:	3301      	adds	r3, #1
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <vBuildResponse+0xca8>)
 80020ce:	889b      	ldrh	r3, [r3, #4]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	4013      	ands	r3, r2
 80020d8:	b21b      	sxth	r3, r3
 80020da:	b29a      	uxth	r2, r3
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <vBuildResponse+0xca8>)
 80020de:	815a      	strh	r2, [r3, #10]
 80020e0:	201c      	movs	r0, #28
 80020e2:	f7fe fe67 	bl	8000db4 <NVIC_DisableIRQ>
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <vBuildResponse+0xca8>)
 80020e8:	88db      	ldrh	r3, [r3, #6]
 80020ea:	3301      	adds	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <vBuildResponse+0xca8>)
 80020f0:	80da      	strh	r2, [r3, #6]
 80020f2:	201c      	movs	r0, #28
 80020f4:	f7fe fe46 	bl	8000d84 <NVIC_EnableIRQ>

	}
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000600 	.word	0x20000600

08002108 <vOnTheFlyConfigurator>:

void vOnTheFlyConfigurator() {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

	if (stcGlobalConfiguration.ui8Update & UPDATE_ALL) {
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <vOnTheFlyConfigurator+0xb4>)
 800210e:	7e9b      	ldrb	r3, [r3, #26]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	2b00      	cmp	r3, #0
 8002116:	d04f      	beq.n	80021b8 <vOnTheFlyConfigurator+0xb0>
		dSystemGeneratorEnable(DISABLE);
 8002118:	2101      	movs	r1, #1
 800211a:	4829      	ldr	r0, [pc, #164]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 800211c:	f7fe fccd 	bl	8000aba <TIM_ClearITPendingBit>
 8002120:	2100      	movs	r1, #0
 8002122:	4827      	ldr	r0, [pc, #156]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 8002124:	f7fe fc62 	bl	80009ec <TIM_Cmd>
		switch (stcGlobalConfiguration.ui8Update) {
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <vOnTheFlyConfigurator+0xb4>)
 800212a:	7e9b      	ldrb	r3, [r3, #26]
 800212c:	2b07      	cmp	r3, #7
 800212e:	d12e      	bne.n	800218e <vOnTheFlyConfigurator+0x86>
		case UPDATE_ALL:
			if (stcGlobalConfiguration.ui8SignalMode == MODE_HTL) {
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <vOnTheFlyConfigurator+0xb4>)
 8002132:	7e5b      	ldrb	r3, [r3, #25]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <vOnTheFlyConfigurator+0x4c>
				TIM1->RCR = 1;
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 800213a:	2201      	movs	r2, #1
 800213c:	861a      	strh	r2, [r3, #48]	; 0x30

				// Timer Clock 50,0 Mhz / Prescaler
				dSystemGeneratorPrescaler(TIM_PRESCALER_HTL)
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 8002140:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28

				// Prescaler value defines the Shift precision
				dSystemGeneratorPeriod(0)
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 8002148:	2200      	movs	r2, #0
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
				dSystemGeneratorEnableInterrupt(ENABLE)
 800214c:	201c      	movs	r0, #28
 800214e:	f7fe fe19 	bl	8000d84 <NVIC_EnableIRQ>
 8002152:	e018      	b.n	8002186 <vOnTheFlyConfigurator+0x7e>

			} else {
				TIM1->RCR = 0;
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 8002156:	2200      	movs	r2, #0
 8002158:	861a      	strh	r2, [r3, #48]	; 0x30

				// Timer 12,5 Mhz!
				dSystemGeneratorPeriod(TIM_PERIOD_PWM)
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 800215c:	f641 026a 	movw	r2, #6250	; 0x186a
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
				if (stcGlobalConfiguration.ui8SignalMode == MODE_STOEBER) {
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <vOnTheFlyConfigurator+0xb4>)
 8002164:	7e5b      	ldrb	r3, [r3, #25]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d103      	bne.n	8002172 <vOnTheFlyConfigurator+0x6a>
					dSystemGeneratorPrescaler(MODE_PWM16Khz);
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 800216c:	2200      	movs	r2, #0
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
 8002170:	e006      	b.n	8002180 <vOnTheFlyConfigurator+0x78>
				} else {
					dSystemGeneratorPrescaler(stcGlobalConfiguration.ui8SignalMode)
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <vOnTheFlyConfigurator+0xb4>)
 8002174:	7e5b      	ldrb	r3, [r3, #25]
 8002176:	b29b      	uxth	r3, r3
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 800217a:	3b01      	subs	r3, #1
 800217c:	b29b      	uxth	r3, r3
 800217e:	8513      	strh	r3, [r2, #40]	; 0x28
				}
				dSystemGeneratorEnableInterrupt(ENABLE)
 8002180:	201c      	movs	r0, #28
 8002182:	f7fe fdff 	bl	8000d84 <NVIC_EnableIRQ>
			}

			stcGlobalRuntimeData.ui8Mode = stcGlobalConfiguration.ui8SignalMode;
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <vOnTheFlyConfigurator+0xb4>)
 8002188:	7e5a      	ldrb	r2, [r3, #25]
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <vOnTheFlyConfigurator+0xbc>)
 800218c:	739a      	strb	r2, [r3, #14]
			// Configure frequency, amp and etc
		default:
			if (stcGlobalConfiguration.ui8SignalMode == MODE_HTL) {
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <vOnTheFlyConfigurator+0xb4>)
 8002190:	7e5b      	ldrb	r3, [r3, #25]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <vOnTheFlyConfigurator+0x94>
				vSetupHtl();
 8002196:	f7fe ff63 	bl	8001060 <vSetupHtl>
 800219a:	e001      	b.n	80021a0 <vOnTheFlyConfigurator+0x98>
			} else {
				vSetupPwm();
 800219c:	f7fe fe24 	bl	8000de8 <vSetupPwm>
			}
			stcGlobalConfiguration.ui8Update = UPDATE_NONE;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <vOnTheFlyConfigurator+0xb4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	769a      	strb	r2, [r3, #26]
			break;
 80021a6:	bf00      	nop
		}

		dSystemGeneratorEnable(ENABLE);
 80021a8:	2101      	movs	r1, #1
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 80021ac:	f7fe fc85 	bl	8000aba <TIM_ClearITPendingBit>
 80021b0:	2101      	movs	r1, #1
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <vOnTheFlyConfigurator+0xb8>)
 80021b4:	f7fe fc1a 	bl	80009ec <TIM_Cmd>
	}
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200005b8 	.word	0x200005b8
 80021c0:	40010000 	.word	0x40010000
 80021c4:	200005d4 	.word	0x200005d4

080021c8 <vTransmitQueueData>:

/* Transmit Data from Tx Queue*/
void vTransmitQueueData() {
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
	uint16_t ui16Temp;
	uint8_t ui8SingleByte;
	ui16Temp = dGetQueueSize(stcQueueTx);
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <vTransmitQueueData+0x78>)
 80021d0:	88db      	ldrh	r3, [r3, #6]
 80021d2:	80fb      	strh	r3, [r7, #6]
	if (ui16Temp > 0) {
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d02d      	beq.n	8002236 <vTransmitQueueData+0x6e>
		if (USARTx_BLOCK->SR & USART_SR_TXE) {
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <vTransmitQueueData+0x7c>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d026      	beq.n	8002236 <vTransmitQueueData+0x6e>
			dRemoveByteFromQueue(stcQueueTx, ui8SingleByte);
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <vTransmitQueueData+0x78>)
 80021ea:	88db      	ldrh	r3, [r3, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <vTransmitQueueData+0x2e>
  __ASM volatile ("cpsid i");
 80021f0:	b672      	cpsid	i
}
 80021f2:	bf00      	nop
 80021f4:	e7fe      	b.n	80021f4 <vTransmitQueueData+0x2c>
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <vTransmitQueueData+0x78>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a11      	ldr	r2, [pc, #68]	; (8002240 <vTransmitQueueData+0x78>)
 80021fc:	8912      	ldrh	r2, [r2, #8]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	717b      	strb	r3, [r7, #5]
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <vTransmitQueueData+0x78>)
 8002206:	88db      	ldrh	r3, [r3, #6]
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <vTransmitQueueData+0x78>)
 800220e:	80da      	strh	r2, [r3, #6]
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <vTransmitQueueData+0x78>)
 8002212:	891b      	ldrh	r3, [r3, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	b29b      	uxth	r3, r3
 8002218:	b21a      	sxth	r2, r3
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <vTransmitQueueData+0x78>)
 800221c:	889b      	ldrh	r3, [r3, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	b29b      	uxth	r3, r3
 8002222:	b21b      	sxth	r3, r3
 8002224:	4013      	ands	r3, r2
 8002226:	b21b      	sxth	r3, r3
 8002228:	b29a      	uxth	r2, r3
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <vTransmitQueueData+0x78>)
 800222c:	811a      	strh	r2, [r3, #8]
			dWrite(ui8SingleByte);
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <vTransmitQueueData+0x7c>)
 8002230:	797a      	ldrb	r2, [r7, #5]
 8002232:	b292      	uxth	r2, r2
 8002234:	809a      	strh	r2, [r3, #4]
		}
	}
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	20000600 	.word	0x20000600
 8002244:	40004800 	.word	0x40004800

08002248 <main>:

/*+++++++++++++++++++++++++++++++++
 * 			Main
 *+++++++++++++++++++++++++++++++++*/
int main(void) {
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
	uint8_t *pui8CurrentData = NULL;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
	uint16_t ui16ParserState = INIT;
 8002252:	2300      	movs	r3, #0
 8002254:	827b      	strh	r3, [r7, #18]
	uint16_t ui16RxBufferOffset = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	823b      	strh	r3, [r7, #16]
	uint8_t ui8TempRxByteCount;
	uint8_t ui8Length;

	vSystemConfigureMisc();			// Setup Misc
 800225a:	f000 ff47 	bl	80030ec <vSystemConfigureMisc>
	vSystemConfigureClocks();		// Setup RCC
 800225e:	f000 ff69 	bl	8003134 <vSystemConfigureClocks>
	vSystemConfigureUart();			// Setup UART
 8002262:	f000 fee7 	bl	8003034 <vSystemConfigureUart>

	memset(&stcGlobalConfiguration, 0, sizeof(Configuration_t));			// Reset memory for the configuration in use+
 8002266:	221c      	movs	r2, #28
 8002268:	2100      	movs	r1, #0
 800226a:	4898      	ldr	r0, [pc, #608]	; (80024cc <main+0x284>)
 800226c:	f001 f80c 	bl	8003288 <memset>
	memset(&stcGlobalRuntimeData, 0, sizeof(RuntimeData_t));
 8002270:	2210      	movs	r2, #16
 8002272:	2100      	movs	r1, #0
 8002274:	4896      	ldr	r0, [pc, #600]	; (80024d0 <main+0x288>)
 8002276:	f001 f807 	bl	8003288 <memset>
	vSystemSetTicktime(SYSTICK_10HZ);	// 10 Hz
 800227a:	200a      	movs	r0, #10
 800227c:	f000 ff44 	bl	8003108 <vSystemSetTicktime>

	// Configure Queues for Data Transfer
	vInitQueues();
 8002280:	f000 ff9a 	bl	80031b8 <vInitQueues>

	vSystemConfigureGenerator();
 8002284:	f000 fe4a 	bl	8002f1c <vSystemConfigureGenerator>
	vSetDefaultConfiguration();
 8002288:	f7ff f8ca 	bl	8001420 <vSetDefaultConfiguration>

	while (1) {
		vOnTheFlyConfigurator();
 800228c:	f7ff ff3c 	bl	8002108 <vOnTheFlyConfigurator>
		vTransmitQueueData();
 8002290:	f7ff ff9a 	bl	80021c8 <vTransmitQueueData>

		// State Machine
		// collect Data, allocate Memory, parse Data
		//------------------------------------------------
		ui8TempRxByteCount = dGetQueueSize(stcQueueRx);
 8002294:	4b8f      	ldr	r3, [pc, #572]	; (80024d4 <main+0x28c>)
 8002296:	88db      	ldrh	r3, [r3, #6]
 8002298:	717b      	strb	r3, [r7, #5]

		// Parser State Machine
		switch (ui16ParserState) {
 800229a:	8a7b      	ldrh	r3, [r7, #18]
 800229c:	2b31      	cmp	r3, #49	; 0x31
 800229e:	f200 8264 	bhi.w	800276a <main+0x522>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <main+0x60>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	08002371 	.word	0x08002371
 80022ac:	080023f3 	.word	0x080023f3
 80022b0:	08002567 	.word	0x08002567
 80022b4:	0800276b 	.word	0x0800276b
 80022b8:	0800276b 	.word	0x0800276b
 80022bc:	0800276b 	.word	0x0800276b
 80022c0:	0800276b 	.word	0x0800276b
 80022c4:	0800276b 	.word	0x0800276b
 80022c8:	0800276b 	.word	0x0800276b
 80022cc:	0800258b 	.word	0x0800258b
 80022d0:	080025c7 	.word	0x080025c7
 80022d4:	0800262f 	.word	0x0800262f
 80022d8:	0800276b 	.word	0x0800276b
 80022dc:	0800276b 	.word	0x0800276b
 80022e0:	0800276b 	.word	0x0800276b
 80022e4:	0800276b 	.word	0x0800276b
 80022e8:	0800276b 	.word	0x0800276b
 80022ec:	0800276b 	.word	0x0800276b
 80022f0:	0800276b 	.word	0x0800276b
 80022f4:	0800276b 	.word	0x0800276b
 80022f8:	0800276b 	.word	0x0800276b
 80022fc:	0800276b 	.word	0x0800276b
 8002300:	0800276b 	.word	0x0800276b
 8002304:	0800276b 	.word	0x0800276b
 8002308:	0800276b 	.word	0x0800276b
 800230c:	0800276b 	.word	0x0800276b
 8002310:	0800276b 	.word	0x0800276b
 8002314:	0800276b 	.word	0x0800276b
 8002318:	0800276b 	.word	0x0800276b
 800231c:	0800276b 	.word	0x0800276b
 8002320:	0800276b 	.word	0x0800276b
 8002324:	0800276b 	.word	0x0800276b
 8002328:	08002673 	.word	0x08002673
 800232c:	0800276b 	.word	0x0800276b
 8002330:	0800276b 	.word	0x0800276b
 8002334:	0800276b 	.word	0x0800276b
 8002338:	0800276b 	.word	0x0800276b
 800233c:	0800276b 	.word	0x0800276b
 8002340:	0800276b 	.word	0x0800276b
 8002344:	0800276b 	.word	0x0800276b
 8002348:	0800276b 	.word	0x0800276b
 800234c:	0800276b 	.word	0x0800276b
 8002350:	0800276b 	.word	0x0800276b
 8002354:	0800276b 	.word	0x0800276b
 8002358:	0800276b 	.word	0x0800276b
 800235c:	0800276b 	.word	0x0800276b
 8002360:	0800276b 	.word	0x0800276b
 8002364:	0800276b 	.word	0x0800276b
 8002368:	080026ab 	.word	0x080026ab
 800236c:	0800274b 	.word	0x0800274b
		case INIT:

			if (ui8TempRxByteCount > 0) {
 8002370:	797b      	ldrb	r3, [r7, #5]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8203 	beq.w	800277e <main+0x536>
				ui16gUartTimeout = TIMEOUT_2SECONDS;	// Timeout is 2 seconds
 8002378:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <main+0x290>)
 800237a:	2214      	movs	r2, #20
 800237c:	801a      	strh	r2, [r3, #0]
				dPeekFirstByte(stcQueueRx, ui8Length);
 800237e:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <main+0x28c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a54      	ldr	r2, [pc, #336]	; (80024d4 <main+0x28c>)
 8002384:	8912      	ldrh	r2, [r2, #8]
 8002386:	4413      	add	r3, r2
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	73fb      	strb	r3, [r7, #15]

				// if Valid Length: there has ben at least one byte payload
				if (ui8Length >= 4) {
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b03      	cmp	r3, #3
 8002390:	d90f      	bls.n	80023b2 <main+0x16a>
					pui8CurrentData = malloc(ui8Length);	// create a bit of space for length and cmd
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 ff67 	bl	8003268 <malloc>
 800239a:	4603      	mov	r3, r0
 800239c:	617b      	str	r3, [r7, #20]

					dAssert(pui8CurrentData != NULL);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <main+0x162>
  __ASM volatile ("cpsid i");
 80023a4:	b672      	cpsid	i
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <main+0x160>
					++ui16ParserState;
 80023aa:	8a7b      	ldrh	r3, [r7, #18]
 80023ac:	3301      	adds	r3, #1
 80023ae:	827b      	strh	r3, [r7, #18]
				} else {
					vBuildResponse(ui16ParserState, ERROR_LENGTH);
					dClearQueue(stcQueueRx);
				}
			}
			break;
 80023b0:	e1e5      	b.n	800277e <main+0x536>
					vBuildResponse(ui16ParserState, ERROR_LENGTH);
 80023b2:	8a7b      	ldrh	r3, [r7, #18]
 80023b4:	2102      	movs	r1, #2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f850 	bl	800145c <vBuildResponse>
					dClearQueue(stcQueueRx);
 80023bc:	2027      	movs	r0, #39	; 0x27
 80023be:	f7fe fcf9 	bl	8000db4 <NVIC_DisableIRQ>
 80023c2:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <main+0x28c>)
 80023c4:	891a      	ldrh	r2, [r3, #8]
 80023c6:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <main+0x28c>)
 80023c8:	88db      	ldrh	r3, [r3, #6]
 80023ca:	4413      	add	r3, r2
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	4b40      	ldr	r3, [pc, #256]	; (80024d4 <main+0x28c>)
 80023d2:	889b      	ldrh	r3, [r3, #4]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b21b      	sxth	r3, r3
 80023da:	4013      	ands	r3, r2
 80023dc:	b21b      	sxth	r3, r3
 80023de:	b29a      	uxth	r2, r3
 80023e0:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <main+0x28c>)
 80023e2:	811a      	strh	r2, [r3, #8]
 80023e4:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <main+0x28c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	80da      	strh	r2, [r3, #6]
 80023ea:	2027      	movs	r0, #39	; 0x27
 80023ec:	f7fe fcca 	bl	8000d84 <NVIC_EnableIRQ>
			break;
 80023f0:	e1c5      	b.n	800277e <main+0x536>

			// Reception
		case RECEIVE:
			if (ui8TempRxByteCount > 0) {
 80023f2:	797b      	ldrb	r3, [r7, #5]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 81c7 	beq.w	8002788 <main+0x540>

				// Check how many bytes are left
				// if There are more than we need then we receive only as much as we need
				if (ui8TempRxByteCount >= ui8Length) {
 80023fa:	797a      	ldrb	r2, [r7, #5]
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d351      	bcc.n	80024a6 <main+0x25e>
					dRemoveFromQueue(stcQueueRx, pui8CurrentData, ui16RxBufferOffset, ui8Length);
 8002402:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <main+0x28c>)
 8002404:	88da      	ldrh	r2, [r3, #6]
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	b29b      	uxth	r3, r3
 800240a:	429a      	cmp	r2, r3
 800240c:	d202      	bcs.n	8002414 <main+0x1cc>
  __ASM volatile ("cpsid i");
 800240e:	b672      	cpsid	i
}
 8002410:	bf00      	nop
 8002412:	e7fe      	b.n	8002412 <main+0x1ca>
 8002414:	2300      	movs	r3, #0
 8002416:	81bb      	strh	r3, [r7, #12]
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <main+0x28c>)
 800241a:	891b      	ldrh	r3, [r3, #8]
 800241c:	817b      	strh	r3, [r7, #10]
 800241e:	e01a      	b.n	8002456 <main+0x20e>
 8002420:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <main+0x28c>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	897b      	ldrh	r3, [r7, #10]
 8002426:	441a      	add	r2, r3
 8002428:	89b9      	ldrh	r1, [r7, #12]
 800242a:	8a3b      	ldrh	r3, [r7, #16]
 800242c:	440b      	add	r3, r1
 800242e:	4619      	mov	r1, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	440b      	add	r3, r1
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	89bb      	ldrh	r3, [r7, #12]
 800243a:	3301      	adds	r3, #1
 800243c:	81bb      	strh	r3, [r7, #12]
 800243e:	897b      	ldrh	r3, [r7, #10]
 8002440:	3301      	adds	r3, #1
 8002442:	b29b      	uxth	r3, r3
 8002444:	b21a      	sxth	r2, r3
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <main+0x28c>)
 8002448:	889b      	ldrh	r3, [r3, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	b29b      	uxth	r3, r3
 800244e:	b21b      	sxth	r3, r3
 8002450:	4013      	ands	r3, r2
 8002452:	b21b      	sxth	r3, r3
 8002454:	817b      	strh	r3, [r7, #10]
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	b29b      	uxth	r3, r3
 800245a:	89ba      	ldrh	r2, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3df      	bcc.n	8002420 <main+0x1d8>
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <main+0x28c>)
 8002462:	891a      	ldrh	r2, [r3, #8]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	b29b      	uxth	r3, r3
 8002468:	4413      	add	r3, r2
 800246a:	b29b      	uxth	r3, r3
 800246c:	b21a      	sxth	r2, r3
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <main+0x28c>)
 8002470:	889b      	ldrh	r3, [r3, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	b21b      	sxth	r3, r3
 8002478:	4013      	ands	r3, r2
 800247a:	b21b      	sxth	r3, r3
 800247c:	b29a      	uxth	r2, r3
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <main+0x28c>)
 8002480:	811a      	strh	r2, [r3, #8]
 8002482:	2027      	movs	r0, #39	; 0x27
 8002484:	f7fe fc96 	bl	8000db4 <NVIC_DisableIRQ>
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <main+0x28c>)
 800248a:	88da      	ldrh	r2, [r3, #6]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	b29b      	uxth	r3, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	b29a      	uxth	r2, r3
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <main+0x28c>)
 8002496:	80da      	strh	r2, [r3, #6]
 8002498:	2027      	movs	r0, #39	; 0x27
 800249a:	f7fe fc73 	bl	8000d84 <NVIC_EnableIRQ>
					++ui16ParserState;
 800249e:	8a7b      	ldrh	r3, [r7, #18]
 80024a0:	3301      	adds	r3, #1
 80024a2:	827b      	strh	r3, [r7, #18]
					ui8Length -= ui8TempRxByteCount;
					dRemoveFromQueue(stcQueueRx, pui8CurrentData, ui16RxBufferOffset, ui8TempRxByteCount);
					ui16RxBufferOffset += ui8TempRxByteCount;
				}
			}
			break;
 80024a4:	e170      	b.n	8002788 <main+0x540>
					ui8Length -= ui8TempRxByteCount;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	797b      	ldrb	r3, [r7, #5]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	73fb      	strb	r3, [r7, #15]
					dRemoveFromQueue(stcQueueRx, pui8CurrentData, ui16RxBufferOffset, ui8TempRxByteCount);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <main+0x28c>)
 80024b0:	88da      	ldrh	r2, [r3, #6]
 80024b2:	797b      	ldrb	r3, [r7, #5]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d202      	bcs.n	80024c0 <main+0x278>
  __ASM volatile ("cpsid i");
 80024ba:	b672      	cpsid	i
}
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <main+0x276>
 80024c0:	2300      	movs	r3, #0
 80024c2:	813b      	strh	r3, [r7, #8]
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <main+0x28c>)
 80024c6:	891b      	ldrh	r3, [r3, #8]
 80024c8:	80fb      	strh	r3, [r7, #6]
 80024ca:	e022      	b.n	8002512 <main+0x2ca>
 80024cc:	200005b8 	.word	0x200005b8
 80024d0:	200005d4 	.word	0x200005d4
 80024d4:	200005f4 	.word	0x200005f4
 80024d8:	20000096 	.word	0x20000096
 80024dc:	4ba9      	ldr	r3, [pc, #676]	; (8002784 <main+0x53c>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	441a      	add	r2, r3
 80024e4:	8939      	ldrh	r1, [r7, #8]
 80024e6:	8a3b      	ldrh	r3, [r7, #16]
 80024e8:	440b      	add	r3, r1
 80024ea:	4619      	mov	r1, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	440b      	add	r3, r1
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	893b      	ldrh	r3, [r7, #8]
 80024f6:	3301      	adds	r3, #1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	3301      	adds	r3, #1
 80024fe:	b29b      	uxth	r3, r3
 8002500:	b21a      	sxth	r2, r3
 8002502:	4ba0      	ldr	r3, [pc, #640]	; (8002784 <main+0x53c>)
 8002504:	889b      	ldrh	r3, [r3, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	b29b      	uxth	r3, r3
 800250a:	b21b      	sxth	r3, r3
 800250c:	4013      	ands	r3, r2
 800250e:	b21b      	sxth	r3, r3
 8002510:	80fb      	strh	r3, [r7, #6]
 8002512:	797b      	ldrb	r3, [r7, #5]
 8002514:	b29b      	uxth	r3, r3
 8002516:	893a      	ldrh	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	d3df      	bcc.n	80024dc <main+0x294>
 800251c:	4b99      	ldr	r3, [pc, #612]	; (8002784 <main+0x53c>)
 800251e:	891a      	ldrh	r2, [r3, #8]
 8002520:	797b      	ldrb	r3, [r7, #5]
 8002522:	b29b      	uxth	r3, r3
 8002524:	4413      	add	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	b21a      	sxth	r2, r3
 800252a:	4b96      	ldr	r3, [pc, #600]	; (8002784 <main+0x53c>)
 800252c:	889b      	ldrh	r3, [r3, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	b29b      	uxth	r3, r3
 8002532:	b21b      	sxth	r3, r3
 8002534:	4013      	ands	r3, r2
 8002536:	b21b      	sxth	r3, r3
 8002538:	b29a      	uxth	r2, r3
 800253a:	4b92      	ldr	r3, [pc, #584]	; (8002784 <main+0x53c>)
 800253c:	811a      	strh	r2, [r3, #8]
 800253e:	2027      	movs	r0, #39	; 0x27
 8002540:	f7fe fc38 	bl	8000db4 <NVIC_DisableIRQ>
 8002544:	4b8f      	ldr	r3, [pc, #572]	; (8002784 <main+0x53c>)
 8002546:	88da      	ldrh	r2, [r3, #6]
 8002548:	797b      	ldrb	r3, [r7, #5]
 800254a:	b29b      	uxth	r3, r3
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <main+0x53c>)
 8002552:	80da      	strh	r2, [r3, #6]
 8002554:	2027      	movs	r0, #39	; 0x27
 8002556:	f7fe fc15 	bl	8000d84 <NVIC_EnableIRQ>
					ui16RxBufferOffset += ui8TempRxByteCount;
 800255a:	797b      	ldrb	r3, [r7, #5]
 800255c:	b29a      	uxth	r2, r3
 800255e:	8a3b      	ldrh	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	823b      	strh	r3, [r7, #16]
			break;
 8002564:	e110      	b.n	8002788 <main+0x540>

			// Jump to command
		case VALIDATE:
			if (dReceivedCommand(pui8CurrentData) >= CMD_SET_FREQUENCIES) {	// Validate command
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	3301      	adds	r3, #1
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d904      	bls.n	800257a <main+0x332>
				ui16ParserState = dReceivedCommand(pui8CurrentData);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002576:	827b      	strh	r3, [r7, #18]
			} else {
				vBuildResponse(ui16ParserState, ERROR_COMMAND);
				ui16ParserState = CLEANUP;
			}
			break;
 8002578:	e107      	b.n	800278a <main+0x542>
				vBuildResponse(ui16ParserState, ERROR_COMMAND);
 800257a:	8a7b      	ldrh	r3, [r7, #18]
 800257c:	2103      	movs	r1, #3
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe ff6c 	bl	800145c <vBuildResponse>
				ui16ParserState = CLEANUP;
 8002584:	2303      	movs	r3, #3
 8002586:	827b      	strh	r3, [r7, #18]
			break;
 8002588:	e0ff      	b.n	800278a <main+0x542>

			// Commands: TODO optimize commom error detection e. g. length
			//------------------------------------------------------------
		case CMD_SET_FREQUENCIES:
			if (dReceivedLength(pui8CurrentData) == (3 + 4 + 3)) {
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b0a      	cmp	r3, #10
 8002590:	d112      	bne.n	80025b8 <main+0x370>
				vSetFrequencies(*((uint32_t*) &pui8CurrentData[3]), pui8CurrentData[3 + 4], pui8CurrentData[3 + 4 + 1], pui8CurrentData[3 + 4 + 2]);
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3303      	adds	r3, #3
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3307      	adds	r3, #7
 800259c:	7819      	ldrb	r1, [r3, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3308      	adds	r3, #8
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3309      	adds	r3, #9
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f000 fb93 	bl	8002cd4 <vSetFrequencies>

				vBuildResponse(CMD_SET_FREQUENCIES, ERROR_NONE);
 80025ae:	2100      	movs	r1, #0
 80025b0:	2009      	movs	r0, #9
 80025b2:	f7fe ff53 	bl	800145c <vBuildResponse>
 80025b6:	e003      	b.n	80025c0 <main+0x378>
			} else {
				vBuildResponse(CMD_SET_FREQUENCIES, ERROR_LENGTH);
 80025b8:	2102      	movs	r1, #2
 80025ba:	2009      	movs	r0, #9
 80025bc:	f7fe ff4e 	bl	800145c <vBuildResponse>
			}
			ui16ParserState = CLEANUP;
 80025c0:	2303      	movs	r3, #3
 80025c2:	827b      	strh	r3, [r7, #18]
			break;
 80025c4:	e0e1      	b.n	800278a <main+0x542>
		case CMD_SET_AMPOFFSETS:
			if (dReceivedLength(pui8CurrentData) == (3 + 2 * 3 * 2)) {
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	d128      	bne.n	8002620 <main+0x3d8>
				dCriticalSection(
 80025ce:	2019      	movs	r0, #25
 80025d0:	f7fe fbf0 	bl	8000db4 <NVIC_DisableIRQ>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3303      	adds	r3, #3
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	b298      	uxth	r0, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3305      	adds	r3, #5
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b299      	uxth	r1, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3307      	adds	r3, #7
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29c      	uxth	r4, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3309      	adds	r3, #9
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29d      	uxth	r5, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	330b      	adds	r3, #11
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	320d      	adds	r2, #13
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	b292      	uxth	r2, r2
 8002604:	9201      	str	r2, [sp, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	462b      	mov	r3, r5
 800260a:	4622      	mov	r2, r4
 800260c:	f000 fb8c 	bl	8002d28 <vSetAmplitudesAndOffsets>
 8002610:	2019      	movs	r0, #25
 8002612:	f7fe fbb7 	bl	8000d84 <NVIC_EnableIRQ>
						vSetAmplitudesAndOffsets(*(uint32_t* ) (pui8CurrentData + 3), *(uint32_t* ) (pui8CurrentData + 3 + 2), *(uint32_t* ) (pui8CurrentData + 3 + 4), *(uint32_t* ) (pui8CurrentData + 3 + 6), *(uint32_t* ) (pui8CurrentData + 3 + 8), *(uint32_t* ) (pui8CurrentData + 3 + 10)));
				vBuildResponse(CMD_SET_AMPOFFSETS, ERROR_NONE);
 8002616:	2100      	movs	r1, #0
 8002618:	200a      	movs	r0, #10
 800261a:	f7fe ff1f 	bl	800145c <vBuildResponse>
 800261e:	e003      	b.n	8002628 <main+0x3e0>
			} else {
				vBuildResponse(CMD_SET_AMPOFFSETS, ERROR_LENGTH);
 8002620:	2102      	movs	r1, #2
 8002622:	200a      	movs	r0, #10
 8002624:	f7fe ff1a 	bl	800145c <vBuildResponse>
			}
			ui16ParserState = CLEANUP;
 8002628:	2303      	movs	r3, #3
 800262a:	827b      	strh	r3, [r7, #18]
			break;
 800262c:	e0ad      	b.n	800278a <main+0x542>

		case CMD_SET_SHIFTS:
			if (dReceivedLength(pui8CurrentData) == (3 + 2 * 3)) {
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b09      	cmp	r3, #9
 8002634:	d116      	bne.n	8002664 <main+0x41c>
				dCriticalSection(vSetShifts(*(uint32_t* ) (pui8CurrentData + 3), *(uint32_t* ) (pui8CurrentData + 3 + 2), *(uint32_t* ) (pui8CurrentData + 3 + 4)));
 8002636:	2019      	movs	r0, #25
 8002638:	f7fe fbbc 	bl	8000db4 <NVIC_DisableIRQ>
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3303      	adds	r3, #3
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3305      	adds	r3, #5
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3307      	adds	r3, #7
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	f000 fb00 	bl	8002c54 <vSetShifts>
 8002654:	2019      	movs	r0, #25
 8002656:	f7fe fb95 	bl	8000d84 <NVIC_EnableIRQ>
				vBuildResponse(CMD_SET_SHIFTS, ERROR_NONE);
 800265a:	2100      	movs	r1, #0
 800265c:	200b      	movs	r0, #11
 800265e:	f7fe fefd 	bl	800145c <vBuildResponse>
 8002662:	e003      	b.n	800266c <main+0x424>
			} else {
				vBuildResponse(CMD_SET_SHIFTS, ERROR_LENGTH);
 8002664:	2102      	movs	r1, #2
 8002666:	200b      	movs	r0, #11
 8002668:	f7fe fef8 	bl	800145c <vBuildResponse>
			}
			ui16ParserState = CLEANUP;
 800266c:	2303      	movs	r3, #3
 800266e:	827b      	strh	r3, [r7, #18]
			break;
 8002670:	e08b      	b.n	800278a <main+0x542>

		case CMD_MODE:
			if (dReceivedLength(pui8CurrentData) == (4)) {
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b04      	cmp	r3, #4
 8002678:	d110      	bne.n	800269c <main+0x454>
				dCriticalSection(vSetMode(*(pui8CurrentData + 3)));
 800267a:	2019      	movs	r0, #25
 800267c:	f7fe fb9a 	bl	8000db4 <NVIC_DisableIRQ>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3303      	adds	r3, #3
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fb06 	bl	8002c98 <vSetMode>
 800268c:	2019      	movs	r0, #25
 800268e:	f7fe fb79 	bl	8000d84 <NVIC_EnableIRQ>
				vBuildResponse(CMD_MODE, ERROR_NONE);
 8002692:	2100      	movs	r1, #0
 8002694:	2020      	movs	r0, #32
 8002696:	f7fe fee1 	bl	800145c <vBuildResponse>
 800269a:	e003      	b.n	80026a4 <main+0x45c>

			} else {
				vBuildResponse(CMD_MODE, ERROR_LENGTH);
 800269c:	2102      	movs	r1, #2
 800269e:	2020      	movs	r0, #32
 80026a0:	f7fe fedc 	bl	800145c <vBuildResponse>
			}
			ui16ParserState = CLEANUP;
 80026a4:	2303      	movs	r3, #3
 80026a6:	827b      	strh	r3, [r7, #18]
			break;
 80026a8:	e06f      	b.n	800278a <main+0x542>

		case CMD_SET_ALL:
			if (dReceivedLength(pui8CurrentData) == (3 + 1 + 4 + 3 + 3 * 6)) {
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b1d      	cmp	r3, #29
 80026b0:	d144      	bne.n	800273c <main+0x4f4>
				dCriticalSection(vSetMode(*(pui8CurrentData + 3));
 80026b2:	2019      	movs	r0, #25
 80026b4:	f7fe fb7e 	bl	8000db4 <NVIC_DisableIRQ>
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3303      	adds	r3, #3
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 faea 	bl	8002c98 <vSetMode>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3304      	adds	r3, #4
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3308      	adds	r3, #8
 80026ce:	7819      	ldrb	r1, [r3, #0]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3309      	adds	r3, #9
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	330a      	adds	r3, #10
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f000 fafa 	bl	8002cd4 <vSetFrequencies>
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	330b      	adds	r3, #11
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	330d      	adds	r3, #13
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	330f      	adds	r3, #15
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f000 faac 	bl	8002c54 <vSetShifts>
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3311      	adds	r3, #17
 8002700:	8818      	ldrh	r0, [r3, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3313      	adds	r3, #19
 8002706:	8819      	ldrh	r1, [r3, #0]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3315      	adds	r3, #21
 800270c:	881c      	ldrh	r4, [r3, #0]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3317      	adds	r3, #23
 8002712:	881d      	ldrh	r5, [r3, #0]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3319      	adds	r3, #25
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	321b      	adds	r2, #27
 800271e:	8812      	ldrh	r2, [r2, #0]
 8002720:	9201      	str	r2, [sp, #4]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	462b      	mov	r3, r5
 8002726:	4622      	mov	r2, r4
 8002728:	f000 fafe 	bl	8002d28 <vSetAmplitudesAndOffsets>
 800272c:	2019      	movs	r0, #25
 800272e:	f7fe fb29 	bl	8000d84 <NVIC_EnableIRQ>

				vSetShifts(*((uint16_t* ) &pui8CurrentData[11]), *((uint16_t* ) &pui8CurrentData[11 + 2]), *((uint16_t* ) &pui8CurrentData[11 + 4]));

				vSetAmplitudesAndOffsets( *((uint16_t* ) &pui8CurrentData[17]), *((uint16_t* ) &pui8CurrentData[17 + 2]), *((uint16_t* ) &pui8CurrentData[17 + 4]), *((uint16_t* ) &pui8CurrentData[23]), *((uint16_t* ) &pui8CurrentData[23 + 2]), *((uint16_t* ) &pui8CurrentData[23 + 4])));

				vBuildResponse(CMD_SET_ALL, ERROR_NONE);
 8002732:	2100      	movs	r1, #0
 8002734:	2030      	movs	r0, #48	; 0x30
 8002736:	f7fe fe91 	bl	800145c <vBuildResponse>
 800273a:	e003      	b.n	8002744 <main+0x4fc>
			} else {
				vBuildResponse(CMD_SET_ALL, ERROR_LENGTH);
 800273c:	2102      	movs	r1, #2
 800273e:	2030      	movs	r0, #48	; 0x30
 8002740:	f7fe fe8c 	bl	800145c <vBuildResponse>
			}
			ui16ParserState = CLEANUP;
 8002744:	2303      	movs	r3, #3
 8002746:	827b      	strh	r3, [r7, #18]
			break;
 8002748:	e01f      	b.n	800278a <main+0x542>

		case CMD_GET_ALL:
			if (dReceivedLength(pui8CurrentData) == (3)) {
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d104      	bne.n	800275c <main+0x514>
				vBuildResponse(CMD_GET_ALL, ERROR_NONE);
 8002752:	2100      	movs	r1, #0
 8002754:	2031      	movs	r0, #49	; 0x31
 8002756:	f7fe fe81 	bl	800145c <vBuildResponse>
 800275a:	e003      	b.n	8002764 <main+0x51c>
			} else {
				vBuildResponse(CMD_GET_ALL, ERROR_LENGTH);
 800275c:	2102      	movs	r1, #2
 800275e:	2031      	movs	r0, #49	; 0x31
 8002760:	f7fe fe7c 	bl	800145c <vBuildResponse>
			}
			ui16ParserState = CLEANUP;
 8002764:	2303      	movs	r3, #3
 8002766:	827b      	strh	r3, [r7, #18]
			break;
 8002768:	e00f      	b.n	800278a <main+0x542>

		case CLEANUP:
		default:
			free(pui8CurrentData);
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f000 fd84 	bl	8003278 <free>
			ui16RxBufferOffset = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	823b      	strh	r3, [r7, #16]
			ui16ParserState = INIT;
 8002774:	2300      	movs	r3, #0
 8002776:	827b      	strh	r3, [r7, #18]
			pui8CurrentData = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
			break;
 800277c:	e005      	b.n	800278a <main+0x542>
			break;
 800277e:	bf00      	nop
 8002780:	e003      	b.n	800278a <main+0x542>
 8002782:	bf00      	nop
 8002784:	200005f4 	.word	0x200005f4
			break;
 8002788:	bf00      	nop

		}
		// taking too long, we need to reset the interface and queue
		if (!ui16gUartTimeout && ui16ParserState != INIT) {
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <main+0x598>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f47f ad7c 	bne.w	800228c <main+0x44>
 8002794:	8a7b      	ldrh	r3, [r7, #18]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f43f ad78 	beq.w	800228c <main+0x44>
			vBuildResponse(ui16ParserState, ERROR_TIMEOUT);
 800279c:	8a7b      	ldrh	r3, [r7, #18]
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fe5b 	bl	800145c <vBuildResponse>
			dClearQueue(stcQueueRx);
 80027a6:	2027      	movs	r0, #39	; 0x27
 80027a8:	f7fe fb04 	bl	8000db4 <NVIC_DisableIRQ>
 80027ac:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <main+0x59c>)
 80027ae:	891a      	ldrh	r2, [r3, #8]
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <main+0x59c>)
 80027b2:	88db      	ldrh	r3, [r3, #6]
 80027b4:	4413      	add	r3, r2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b21a      	sxth	r2, r3
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <main+0x59c>)
 80027bc:	889b      	ldrh	r3, [r3, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4013      	ands	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <main+0x59c>)
 80027cc:	811a      	strh	r2, [r3, #8]
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <main+0x59c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	80da      	strh	r2, [r3, #6]
 80027d4:	2027      	movs	r0, #39	; 0x27
 80027d6:	f7fe fad5 	bl	8000d84 <NVIC_EnableIRQ>
			ui16ParserState = CLEANUP;
 80027da:	2303      	movs	r3, #3
 80027dc:	827b      	strh	r3, [r7, #18]
		vOnTheFlyConfigurator();
 80027de:	e555      	b.n	800228c <main+0x44>
 80027e0:	20000096 	.word	0x20000096
 80027e4:	200005f4 	.word	0x200005f4

080027e8 <SysTick_Handler>:

	}
}

/* Timer for setting timeouts etc*/
void SysTick_Handler(void) {
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
	if (ui16gUartTimeout > 0) {
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <SysTick_Handler+0x20>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <SysTick_Handler+0x18>
		--ui16gUartTimeout;
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SysTick_Handler+0x20>)
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <SysTick_Handler+0x20>)
 80027fe:	801a      	strh	r2, [r3, #0]
	}
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000096 	.word	0x20000096

0800280c <TIM1_UP_TIM10_IRQHandler>:

// Use CC Interrupt with preload for PWM
/* Timer Routinen */
void TIM1_UP_TIM10_IRQHandler() {
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0

	//ui32DebugArray[ui32DebugIndex] = ui32TableIndex;
	//ui32DebugIndex = (ui32DebugIndex + 1) % 1000;
	//ui32DebugCounter = 0;
	// 977 Werte pro Abschnitt
	++ui32DebugCounter;
 8002812:	4b7b      	ldr	r3, [pc, #492]	; (8002a00 <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a79      	ldr	r2, [pc, #484]	; (8002a00 <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 800281a:	6013      	str	r3, [r2, #0]

	switch (stcGlobalRuntimeData.ui8Mode) {
 800281c:	4b79      	ldr	r3, [pc, #484]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 800281e:	7b9b      	ldrb	r3, [r3, #14]
 8002820:	3b01      	subs	r3, #1
 8002822:	2b07      	cmp	r3, #7
 8002824:	f200 81aa 	bhi.w	8002b7c <TIM1_UP_TIM10_IRQHandler+0x370>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <TIM1_UP_TIM10_IRQHandler+0x24>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002851 	.word	0x08002851
 8002834:	08002851 	.word	0x08002851
 8002838:	08002a39 	.word	0x08002a39
 800283c:	08002851 	.word	0x08002851
 8002840:	08002b7d 	.word	0x08002b7d
 8002844:	08002b7d 	.word	0x08002b7d
 8002848:	08002b7d 	.word	0x08002b7d
 800284c:	08002851 	.word	0x08002851
	case MODE_PWM16Khz:
	case MODE_PWM8Khz:
	case MODE_PWM4Khz:
	case MODE_PWM2Khz:
		if (stcGlobalConfiguration.ui32SignalFrequencyMaster != 0) {
 8002850:	4b6d      	ldr	r3, [pc, #436]	; (8002a08 <TIM1_UP_TIM10_IRQHandler+0x1fc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80c5 	beq.w	80029e4 <TIM1_UP_TIM10_IRQHandler+0x1d8>
			ui32ShiftU = (stcGlobalRuntimeData.ui16TableIndex + stcGlobalRuntimeData.ui16ShiftU) % mTotalNumberOfValues;
 800285a:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 800285c:	899b      	ldrh	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	4413      	add	r3, r2
 8002866:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <TIM1_UP_TIM10_IRQHandler+0x200>)
 8002868:	fb82 1203 	smull	r1, r2, r2, r3
 800286c:	1251      	asrs	r1, r2, #9
 800286e:	17da      	asrs	r2, r3, #31
 8002870:	1a8a      	subs	r2, r1, r2
 8002872:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002876:	fb01 f202 	mul.w	r2, r1, r2
 800287a:	1a9a      	subs	r2, r3, r2
 800287c:	4b64      	ldr	r3, [pc, #400]	; (8002a10 <TIM1_UP_TIM10_IRQHandler+0x204>)
 800287e:	601a      	str	r2, [r3, #0]
			ui32ShiftV = (stcGlobalRuntimeData.ui16TableIndex + stcGlobalRuntimeData.ui16ShiftV) % mTotalNumberOfValues;
 8002880:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 8002882:	899b      	ldrh	r3, [r3, #12]
 8002884:	461a      	mov	r2, r3
 8002886:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 8002888:	885b      	ldrh	r3, [r3, #2]
 800288a:	4413      	add	r3, r2
 800288c:	4a5f      	ldr	r2, [pc, #380]	; (8002a0c <TIM1_UP_TIM10_IRQHandler+0x200>)
 800288e:	fb82 1203 	smull	r1, r2, r2, r3
 8002892:	1251      	asrs	r1, r2, #9
 8002894:	17da      	asrs	r2, r3, #31
 8002896:	1a8a      	subs	r2, r1, r2
 8002898:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800289c:	fb01 f202 	mul.w	r2, r1, r2
 80028a0:	1a9a      	subs	r2, r3, r2
 80028a2:	4b5c      	ldr	r3, [pc, #368]	; (8002a14 <TIM1_UP_TIM10_IRQHandler+0x208>)
 80028a4:	601a      	str	r2, [r3, #0]
			ui32ShiftW = (stcGlobalRuntimeData.ui16TableIndex + stcGlobalRuntimeData.ui16ShiftW) % mTotalNumberOfValues;
 80028a6:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 80028a8:	899b      	ldrh	r3, [r3, #12]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b55      	ldr	r3, [pc, #340]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 80028ae:	889b      	ldrh	r3, [r3, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	4a56      	ldr	r2, [pc, #344]	; (8002a0c <TIM1_UP_TIM10_IRQHandler+0x200>)
 80028b4:	fb82 1203 	smull	r1, r2, r2, r3
 80028b8:	1251      	asrs	r1, r2, #9
 80028ba:	17da      	asrs	r2, r3, #31
 80028bc:	1a8a      	subs	r2, r1, r2
 80028be:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80028c2:	fb01 f202 	mul.w	r2, r1, r2
 80028c6:	1a9a      	subs	r2, r3, r2
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <TIM1_UP_TIM10_IRQHandler+0x20c>)
 80028ca:	601a      	str	r2, [r3, #0]

			ui16CCR1 = arrui32SignalTable[ui8SelectSignalType][ui32ShiftU] * stcGlobalConfiguration.ui16SignalAmplitudeU / 100; // + arrui32SignalTable[ui8SelectSignalType][ui32ShiftU] * (100 - stcGlobalConfiguration.ui16SignalAmplitudeU) / 200;
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <TIM1_UP_TIM10_IRQHandler+0x210>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <TIM1_UP_TIM10_IRQHandler+0x204>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4952      	ldr	r1, [pc, #328]	; (8002a20 <TIM1_UP_TIM10_IRQHandler+0x214>)
 80028d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80028dc:	fb02 f200 	mul.w	r2, r2, r0
 80028e0:	4413      	add	r3, r2
 80028e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028e6:	4a48      	ldr	r2, [pc, #288]	; (8002a08 <TIM1_UP_TIM10_IRQHandler+0x1fc>)
 80028e8:	8892      	ldrh	r2, [r2, #4]
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <TIM1_UP_TIM10_IRQHandler+0x218>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <TIM1_UP_TIM10_IRQHandler+0x21c>)
 80028fa:	801a      	strh	r2, [r3, #0]
			ui16CCR2 = arrui32SignalTable[ui8SelectSignalType][ui32ShiftV] * stcGlobalConfiguration.ui16SignalAmplitudeV / 100; // + arrui32SignalTable[ui8SelectSignalType][ui32ShiftV] * (100 - stcGlobalConfiguration.ui16SignalAmplitudeV) / 200;
 80028fc:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <TIM1_UP_TIM10_IRQHandler+0x210>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	4b44      	ldr	r3, [pc, #272]	; (8002a14 <TIM1_UP_TIM10_IRQHandler+0x208>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4946      	ldr	r1, [pc, #280]	; (8002a20 <TIM1_UP_TIM10_IRQHandler+0x214>)
 8002908:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800290c:	fb02 f200 	mul.w	r2, r2, r0
 8002910:	4413      	add	r3, r2
 8002912:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002916:	4a3c      	ldr	r2, [pc, #240]	; (8002a08 <TIM1_UP_TIM10_IRQHandler+0x1fc>)
 8002918:	88d2      	ldrh	r2, [r2, #6]
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	4a41      	ldr	r2, [pc, #260]	; (8002a24 <TIM1_UP_TIM10_IRQHandler+0x218>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b40      	ldr	r3, [pc, #256]	; (8002a2c <TIM1_UP_TIM10_IRQHandler+0x220>)
 800292a:	801a      	strh	r2, [r3, #0]
			ui16CCR3 = arrui32SignalTable[ui8SelectSignalType][ui32ShiftW] * stcGlobalConfiguration.ui16SignalAmplitudeW / 100; // + arrui32SignalTable[ui8SelectSignalType][ui32ShiftW] * (100 - stcGlobalConfiguration.ui16SignalAmplitudeW) / 200;
 800292c:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <TIM1_UP_TIM10_IRQHandler+0x210>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <TIM1_UP_TIM10_IRQHandler+0x20c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	493a      	ldr	r1, [pc, #232]	; (8002a20 <TIM1_UP_TIM10_IRQHandler+0x214>)
 8002938:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800293c:	fb02 f200 	mul.w	r2, r2, r0
 8002940:	4413      	add	r3, r2
 8002942:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002946:	4a30      	ldr	r2, [pc, #192]	; (8002a08 <TIM1_UP_TIM10_IRQHandler+0x1fc>)
 8002948:	8912      	ldrh	r2, [r2, #8]
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	4a35      	ldr	r2, [pc, #212]	; (8002a24 <TIM1_UP_TIM10_IRQHandler+0x218>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <TIM1_UP_TIM10_IRQHandler+0x224>)
 800295a:	801a      	strh	r2, [r3, #0]

			TIM1->CCR1 = ui16CCR1 + stcGlobalRuntimeData.ui16BottomOffsetU;
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <TIM1_UP_TIM10_IRQHandler+0x21c>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 8002964:	88db      	ldrh	r3, [r3, #6]
 8002966:	441a      	add	r2, r3
 8002968:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <TIM1_UP_TIM10_IRQHandler+0x228>)
 800296a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = ui16CCR2 + stcGlobalRuntimeData.ui16BottomOffsetV;
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <TIM1_UP_TIM10_IRQHandler+0x220>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 8002974:	891b      	ldrh	r3, [r3, #8]
 8002976:	441a      	add	r2, r3
 8002978:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <TIM1_UP_TIM10_IRQHandler+0x228>)
 800297a:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = ui16CCR3 + stcGlobalRuntimeData.ui16BottomOffsetW;
 800297c:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <TIM1_UP_TIM10_IRQHandler+0x224>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 8002984:	895b      	ldrh	r3, [r3, #10]
 8002986:	441a      	add	r2, r3
 8002988:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <TIM1_UP_TIM10_IRQHandler+0x228>)
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c

			ui32FrequencyBasedOnPwm = stcGlobalConfiguration.ui32SignalFrequencyMaster;
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <TIM1_UP_TIM10_IRQHandler+0x1fc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	607b      	str	r3, [r7, #4]
			if (stcGlobalRuntimeData.ui8Mode == MODE_PWM16Khz) {
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 8002994:	7b9b      	ldrb	r3, [r3, #14]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d103      	bne.n	80029a2 <TIM1_UP_TIM10_IRQHandler+0x196>
				ui32FrequencyBasedOnPwm = ui32FrequencyBasedOnPwm >> 1;	// 1 Hz kann nicht dargestellt werden, bzw bei 16 kHz sind 3 Hz dann 1 Hz
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	e00e      	b.n	80029c0 <TIM1_UP_TIM10_IRQHandler+0x1b4>
			} else if (stcGlobalRuntimeData.ui8Mode == MODE_PWM4Khz) {
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 80029a4:	7b9b      	ldrb	r3, [r3, #14]
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d103      	bne.n	80029b2 <TIM1_UP_TIM10_IRQHandler+0x1a6>
				ui32FrequencyBasedOnPwm = ui32FrequencyBasedOnPwm << 1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	e006      	b.n	80029c0 <TIM1_UP_TIM10_IRQHandler+0x1b4>
			} else if (stcGlobalRuntimeData.ui8Mode == MODE_PWM2Khz) {
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 80029b4:	7b9b      	ldrb	r3, [r3, #14]
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d102      	bne.n	80029c0 <TIM1_UP_TIM10_IRQHandler+0x1b4>
				ui32FrequencyBasedOnPwm = ui32FrequencyBasedOnPwm << 2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	607b      	str	r3, [r7, #4]
			}

			stcGlobalRuntimeData.ui16TableIndex = (stcGlobalRuntimeData.ui16TableIndex + (ui32FrequencyBasedOnPwm)) % mTotalNumberOfValues;
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 80029c2:	899b      	ldrh	r3, [r3, #12]
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	441a      	add	r2, r3
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <TIM1_UP_TIM10_IRQHandler+0x200>)
 80029cc:	fba3 1302 	umull	r1, r3, r3, r2
 80029d0:	0a5b      	lsrs	r3, r3, #9
 80029d2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	b29a      	uxth	r2, r3
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 80029e0:	819a      	strh	r2, [r3, #12]
		} else {
			TIM1->CCR1 = (TIM_PERIOD_PWM * 100) / 170;	//TIM_PERIOD_PWM>>1;
			TIM1->CCR2 = (TIM_PERIOD_PWM * 100) / 180;	//TIM_PERIOD_PWM>>1;
			TIM1->CCR3 = (TIM_PERIOD_PWM * 100) / 180;	//TIM_PERIOD_PWM>>1;
		}
		break;
 80029e2:	e0ce      	b.n	8002b82 <TIM1_UP_TIM10_IRQHandler+0x376>
			TIM1->CCR1 = (TIM_PERIOD_PWM * 100) / 170;	//TIM_PERIOD_PWM>>1;
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <TIM1_UP_TIM10_IRQHandler+0x228>)
 80029e6:	f640 625c 	movw	r2, #3676	; 0xe5c
 80029ea:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = (TIM_PERIOD_PWM * 100) / 180;	//TIM_PERIOD_PWM>>1;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <TIM1_UP_TIM10_IRQHandler+0x228>)
 80029ee:	f44f 6259 	mov.w	r2, #3472	; 0xd90
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = (TIM_PERIOD_PWM * 100) / 180;	//TIM_PERIOD_PWM>>1;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <TIM1_UP_TIM10_IRQHandler+0x228>)
 80029f6:	f44f 6259 	mov.w	r2, #3472	; 0xd90
 80029fa:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80029fc:	e0c1      	b.n	8002b82 <TIM1_UP_TIM10_IRQHandler+0x376>
 80029fe:	bf00      	nop
 8002a00:	20000098 	.word	0x20000098
 8002a04:	200005d4 	.word	0x200005d4
 8002a08:	200005b8 	.word	0x200005b8
 8002a0c:	10624dd3 	.word	0x10624dd3
 8002a10:	2000009c 	.word	0x2000009c
 8002a14:	200000a0 	.word	0x200000a0
 8002a18:	200000a4 	.word	0x200000a4
 8002a1c:	20000094 	.word	0x20000094
 8002a20:	08003448 	.word	0x08003448
 8002a24:	51eb851f 	.word	0x51eb851f
 8002a28:	200000a8 	.word	0x200000a8
 8002a2c:	200000aa 	.word	0x200000aa
 8002a30:	200000ac 	.word	0x200000ac
 8002a34:	40010000 	.word	0x40010000
	case MODE_STOEBER:
		if (stcGlobalConfiguration.ui32SignalFrequencyMaster != 0) {
 8002a38:	4b5b      	ldr	r3, [pc, #364]	; (8002ba8 <TIM1_UP_TIM10_IRQHandler+0x39c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 809f 	beq.w	8002b80 <TIM1_UP_TIM10_IRQHandler+0x374>
			ui32ShiftU = (stcGlobalRuntimeData.ui16TableIndex + stcGlobalRuntimeData.ui16ShiftU) % mTotalNumberOfValues;
 8002a42:	4b5a      	ldr	r3, [pc, #360]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002a44:	899b      	ldrh	r3, [r3, #12]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b58      	ldr	r3, [pc, #352]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4a58      	ldr	r2, [pc, #352]	; (8002bb0 <TIM1_UP_TIM10_IRQHandler+0x3a4>)
 8002a50:	fb82 1203 	smull	r1, r2, r2, r3
 8002a54:	1251      	asrs	r1, r2, #9
 8002a56:	17da      	asrs	r2, r3, #31
 8002a58:	1a8a      	subs	r2, r1, r2
 8002a5a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002a5e:	fb01 f202 	mul.w	r2, r1, r2
 8002a62:	1a9a      	subs	r2, r3, r2
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <TIM1_UP_TIM10_IRQHandler+0x3a8>)
 8002a66:	601a      	str	r2, [r3, #0]
			ui32ShiftV = (stcGlobalRuntimeData.ui16TableIndex + stcGlobalRuntimeData.ui16ShiftV) % mTotalNumberOfValues;
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002a6a:	899b      	ldrh	r3, [r3, #12]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002a70:	885b      	ldrh	r3, [r3, #2]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a4e      	ldr	r2, [pc, #312]	; (8002bb0 <TIM1_UP_TIM10_IRQHandler+0x3a4>)
 8002a76:	fb82 1203 	smull	r1, r2, r2, r3
 8002a7a:	1251      	asrs	r1, r2, #9
 8002a7c:	17da      	asrs	r2, r3, #31
 8002a7e:	1a8a      	subs	r2, r1, r2
 8002a80:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002a84:	fb01 f202 	mul.w	r2, r1, r2
 8002a88:	1a9a      	subs	r2, r3, r2
 8002a8a:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <TIM1_UP_TIM10_IRQHandler+0x3ac>)
 8002a8c:	601a      	str	r2, [r3, #0]
			ui32ShiftW = (stcGlobalRuntimeData.ui16TableIndex + stcGlobalRuntimeData.ui16ShiftW) % mTotalNumberOfValues;
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002a90:	899b      	ldrh	r3, [r3, #12]
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b45      	ldr	r3, [pc, #276]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002a96:	889b      	ldrh	r3, [r3, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a45      	ldr	r2, [pc, #276]	; (8002bb0 <TIM1_UP_TIM10_IRQHandler+0x3a4>)
 8002a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa0:	1251      	asrs	r1, r2, #9
 8002aa2:	17da      	asrs	r2, r3, #31
 8002aa4:	1a8a      	subs	r2, r1, r2
 8002aa6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002aaa:	fb01 f202 	mul.w	r2, r1, r2
 8002aae:	1a9a      	subs	r2, r3, r2
 8002ab0:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8002ab2:	601a      	str	r2, [r3, #0]

			ui16CCR1 = arrui32SignalTable[dSelectTriangle][ui32ShiftU] * stcGlobalConfiguration.ui16SignalAmplitudeU / 100;
 8002ab4:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <TIM1_UP_TIM10_IRQHandler+0x3a8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a41      	ldr	r2, [pc, #260]	; (8002bc0 <TIM1_UP_TIM10_IRQHandler+0x3b4>)
 8002aba:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8002abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac2:	4a39      	ldr	r2, [pc, #228]	; (8002ba8 <TIM1_UP_TIM10_IRQHandler+0x39c>)
 8002ac4:	8892      	ldrh	r2, [r2, #4]
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	4a3e      	ldr	r2, [pc, #248]	; (8002bc4 <TIM1_UP_TIM10_IRQHandler+0x3b8>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <TIM1_UP_TIM10_IRQHandler+0x3bc>)
 8002ad6:	801a      	strh	r2, [r3, #0]
			ui16CCR2 = arrui32SignalTable[dSelectTriangle][ui32ShiftV] * stcGlobalConfiguration.ui16SignalAmplitudeV / 100;
 8002ad8:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <TIM1_UP_TIM10_IRQHandler+0x3ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a38      	ldr	r2, [pc, #224]	; (8002bc0 <TIM1_UP_TIM10_IRQHandler+0x3b4>)
 8002ade:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <TIM1_UP_TIM10_IRQHandler+0x39c>)
 8002ae8:	88d2      	ldrh	r2, [r2, #6]
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	4a35      	ldr	r2, [pc, #212]	; (8002bc4 <TIM1_UP_TIM10_IRQHandler+0x3b8>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <TIM1_UP_TIM10_IRQHandler+0x3c0>)
 8002afa:	801a      	strh	r2, [r3, #0]
			ui16CCR3 = arrui32SignalTable[dSelectTriangle][ui32ShiftW] * stcGlobalConfiguration.ui16SignalAmplitudeW / 100;
 8002afc:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <TIM1_UP_TIM10_IRQHandler+0x3b0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <TIM1_UP_TIM10_IRQHandler+0x3b4>)
 8002b02:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <TIM1_UP_TIM10_IRQHandler+0x39c>)
 8002b0c:	8912      	ldrh	r2, [r2, #8]
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <TIM1_UP_TIM10_IRQHandler+0x3b8>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <TIM1_UP_TIM10_IRQHandler+0x3c4>)
 8002b1e:	801a      	strh	r2, [r3, #0]

			TIM1->CCR1 = ui16CCR1 + stcGlobalRuntimeData.ui16BottomOffsetU;
 8002b20:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <TIM1_UP_TIM10_IRQHandler+0x3bc>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b21      	ldr	r3, [pc, #132]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002b28:	88db      	ldrh	r3, [r3, #6]
 8002b2a:	441a      	add	r2, r3
 8002b2c:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <TIM1_UP_TIM10_IRQHandler+0x3c8>)
 8002b2e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = ui16CCR2 + stcGlobalRuntimeData.ui16BottomOffsetV;
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <TIM1_UP_TIM10_IRQHandler+0x3c0>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002b38:	891b      	ldrh	r3, [r3, #8]
 8002b3a:	441a      	add	r2, r3
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <TIM1_UP_TIM10_IRQHandler+0x3c8>)
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = ui16CCR3 + stcGlobalRuntimeData.ui16BottomOffsetW;
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <TIM1_UP_TIM10_IRQHandler+0x3c4>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002b48:	895b      	ldrh	r3, [r3, #10]
 8002b4a:	441a      	add	r2, r3
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <TIM1_UP_TIM10_IRQHandler+0x3c8>)
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c

			ui32FrequencyBasedOnPwm = stcGlobalConfiguration.ui32SignalFrequencyMaster >> 1;
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <TIM1_UP_TIM10_IRQHandler+0x39c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
			stcGlobalRuntimeData.ui16TableIndex = (stcGlobalRuntimeData.ui16TableIndex + (ui32FrequencyBasedOnPwm)) % mTotalNumberOfValues;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002b5a:	899b      	ldrh	r3, [r3, #12]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	441a      	add	r2, r3
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <TIM1_UP_TIM10_IRQHandler+0x3a4>)
 8002b64:	fba3 1302 	umull	r1, r3, r3, r2
 8002b68:	0a5b      	lsrs	r3, r3, #9
 8002b6a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002b78:	819a      	strh	r2, [r3, #12]

		}

		break;
 8002b7a:	e001      	b.n	8002b80 <TIM1_UP_TIM10_IRQHandler+0x374>
	default:
		break;
 8002b7c:	bf00      	nop
 8002b7e:	e000      	b.n	8002b82 <TIM1_UP_TIM10_IRQHandler+0x376>
		break;
 8002b80:	bf00      	nop
	}

	stcGlobalRuntimeData.ui8Duant = ~stcGlobalRuntimeData.ui8Duant;
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002b84:	7bdb      	ldrb	r3, [r3, #15]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x3a0>)
 8002b8c:	73da      	strb	r2, [r3, #15]
	TIM1->SR &= ~TIM_SR_UIF;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <TIM1_UP_TIM10_IRQHandler+0x3c8>)
 8002b90:	8a1b      	ldrh	r3, [r3, #16]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4a0f      	ldr	r2, [pc, #60]	; (8002bd4 <TIM1_UP_TIM10_IRQHandler+0x3c8>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8213      	strh	r3, [r2, #16]

}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	200005b8 	.word	0x200005b8
 8002bac:	200005d4 	.word	0x200005d4
 8002bb0:	10624dd3 	.word	0x10624dd3
 8002bb4:	2000009c 	.word	0x2000009c
 8002bb8:	200000a0 	.word	0x200000a0
 8002bbc:	200000a4 	.word	0x200000a4
 8002bc0:	08003448 	.word	0x08003448
 8002bc4:	51eb851f 	.word	0x51eb851f
 8002bc8:	200000a8 	.word	0x200000a8
 8002bcc:	200000aa 	.word	0x200000aa
 8002bd0:	200000ac 	.word	0x200000ac
 8002bd4:	40010000 	.word	0x40010000

08002bd8 <USART3_IRQHandler>:

/* Receive Rx Interrupts*/
void USART3_IRQHandler() {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0

	// Is there is new data, put it into queue
	// Bit is cleared by reading DR
	if (USART3->SR & USART_SR_RXNE) {
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <USART3_IRQHandler+0x74>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02d      	beq.n	8002c46 <USART3_IRQHandler+0x6e>
		dPutByteIntoQueue(stcQueueRx, USART3->DR);
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <USART3_IRQHandler+0x78>)
 8002bec:	88da      	ldrh	r2, [r3, #6]
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <USART3_IRQHandler+0x78>)
 8002bf0:	889b      	ldrh	r3, [r3, #4]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <USART3_IRQHandler+0x24>
  __ASM volatile ("cpsid i");
 8002bf6:	b672      	cpsid	i
}
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <USART3_IRQHandler+0x22>
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <USART3_IRQHandler+0x74>)
 8002bfe:	889b      	ldrh	r3, [r3, #4]
 8002c00:	b299      	uxth	r1, r3
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <USART3_IRQHandler+0x78>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <USART3_IRQHandler+0x78>)
 8002c08:	8952      	ldrh	r2, [r2, #10]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <USART3_IRQHandler+0x78>)
 8002c12:	895b      	ldrh	r3, [r3, #10]
 8002c14:	3301      	adds	r3, #1
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	b21a      	sxth	r2, r3
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <USART3_IRQHandler+0x78>)
 8002c1c:	889b      	ldrh	r3, [r3, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b21b      	sxth	r3, r3
 8002c24:	4013      	ands	r3, r2
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <USART3_IRQHandler+0x78>)
 8002c2c:	815a      	strh	r2, [r3, #10]
 8002c2e:	201c      	movs	r0, #28
 8002c30:	f7fe f8c0 	bl	8000db4 <NVIC_DisableIRQ>
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <USART3_IRQHandler+0x78>)
 8002c36:	88db      	ldrh	r3, [r3, #6]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <USART3_IRQHandler+0x78>)
 8002c3e:	80da      	strh	r2, [r3, #6]
 8002c40:	201c      	movs	r0, #28
 8002c42:	f7fe f89f 	bl	8000d84 <NVIC_EnableIRQ>
	}
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	200005f4 	.word	0x200005f4

08002c54 <vSetShifts>:
#include "globals.h"

Configuration_t stcGlobalConfiguration;
RuntimeData_t stcGlobalRuntimeData;

void vSetShifts(uint32_t ui32SignalShiftU, uint32_t ui32SignalShiftV, uint32_t ui32SignalShiftW) {
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
	Configuration_t *pconfiguration = &stcGlobalConfiguration;
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <vSetShifts+0x40>)
 8002c62:	617b      	str	r3, [r7, #20]

	pconfiguration->ui16SignalShiftU = ui32SignalShiftU;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	821a      	strh	r2, [r3, #16]
	pconfiguration->ui16SignalShiftV = ui32SignalShiftV;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	825a      	strh	r2, [r3, #18]
	pconfiguration->ui16SignalShiftW = ui32SignalShiftW;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	829a      	strh	r2, [r3, #20]

	pconfiguration->ui8Update |= UPDATE_SHIFT;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	7e9b      	ldrb	r3, [r3, #26]
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	769a      	strb	r2, [r3, #26]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	200005b8 	.word	0x200005b8

08002c98 <vSetMode>:

/* Set Mode */
void vSetMode(uint8_t ui8Mode) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
	Configuration_t *pconfiguration = &stcGlobalConfiguration;
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <vSetMode+0x38>)
 8002ca4:	60fb      	str	r3, [r7, #12]

	if (ui8Mode != pconfiguration->ui8SignalMode) {
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	7e5b      	ldrb	r3, [r3, #25]
 8002caa:	79fa      	ldrb	r2, [r7, #7]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d009      	beq.n	8002cc4 <vSetMode+0x2c>
		pconfiguration->ui8SignalMode = ui8Mode;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	79fa      	ldrb	r2, [r7, #7]
 8002cb4:	765a      	strb	r2, [r3, #25]
		pconfiguration->ui8Update |= UPDATE_ALL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	7e9b      	ldrb	r3, [r3, #26]
 8002cba:	f043 0307 	orr.w	r3, r3, #7
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	769a      	strb	r2, [r3, #26]
	}
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	200005b8 	.word	0x200005b8

08002cd4 <vSetFrequencies>:

/* Set Frequency*/
void vSetFrequencies(uint32_t ui32SignalFrequencyMaster, uint8_t ui8SignalStateU, uint8_t ui8SignalStateV, uint8_t ui8SignalStateW) {
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	70fb      	strb	r3, [r7, #3]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	70bb      	strb	r3, [r7, #2]
 8002cea:	4613      	mov	r3, r2
 8002cec:	707b      	strb	r3, [r7, #1]
	Configuration_t *pconfiguration = &stcGlobalConfiguration;
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <vSetFrequencies+0x50>)
 8002cf0:	60fb      	str	r3, [r7, #12]

	pconfiguration->ui32SignalFrequencyMaster = ui32SignalFrequencyMaster;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]
	pconfiguration->ui8SignalStateU = ui8SignalStateU;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	759a      	strb	r2, [r3, #22]
	pconfiguration->ui8SignalStateV = ui8SignalStateV;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	78ba      	ldrb	r2, [r7, #2]
 8002d02:	75da      	strb	r2, [r3, #23]
	pconfiguration->ui8SignalStateW = ui8SignalStateW;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	787a      	ldrb	r2, [r7, #1]
 8002d08:	761a      	strb	r2, [r3, #24]

	pconfiguration->ui8Update |= UPDATE_FREQ;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	7e9b      	ldrb	r3, [r3, #26]
 8002d0e:	f043 0302 	orr.w	r3, r3, #2
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	769a      	strb	r2, [r3, #26]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	200005b8 	.word	0x200005b8

08002d28 <vSetAmplitudesAndOffsets>:

/* Set amplitudes and offsets */
void vSetAmplitudesAndOffsets(uint16_t ui16SignalAmplitudeU, uint16_t ui16SignalAmplitudeV, uint16_t ui16SignalAmplitudeW, uint16_t ui16SignalOffsetU, uint16_t ui16SignalOffsetV,
		uint16_t ui16SignalOffsetW) {
 8002d28:	b490      	push	{r4, r7}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4623      	mov	r3, r4
 8002d38:	80fb      	strh	r3, [r7, #6]
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	80bb      	strh	r3, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	807b      	strh	r3, [r7, #2]
 8002d42:	4613      	mov	r3, r2
 8002d44:	803b      	strh	r3, [r7, #0]
	Configuration_t *pconfiguration = &stcGlobalConfiguration;
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <vSetAmplitudesAndOffsets+0x60>)
 8002d48:	60fb      	str	r3, [r7, #12]

	pconfiguration->ui16SignalOffsetU = ui16SignalOffsetU;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	883a      	ldrh	r2, [r7, #0]
 8002d4e:	815a      	strh	r2, [r3, #10]
	pconfiguration->ui16SignalOffsetV = ui16SignalOffsetV;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8b3a      	ldrh	r2, [r7, #24]
 8002d54:	819a      	strh	r2, [r3, #12]
	pconfiguration->ui16SignalOffsetW = ui16SignalOffsetW;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8bba      	ldrh	r2, [r7, #28]
 8002d5a:	81da      	strh	r2, [r3, #14]

	pconfiguration->ui16SignalAmplitudeU = ui16SignalAmplitudeU;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	88fa      	ldrh	r2, [r7, #6]
 8002d60:	809a      	strh	r2, [r3, #4]
	pconfiguration->ui16SignalAmplitudeV = ui16SignalAmplitudeV;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	88ba      	ldrh	r2, [r7, #4]
 8002d66:	80da      	strh	r2, [r3, #6]
	pconfiguration->ui16SignalAmplitudeW = ui16SignalAmplitudeW;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	811a      	strh	r2, [r3, #8]

	pconfiguration->ui8Update |= UPDATE_AMPOFF;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	7e9b      	ldrb	r3, [r3, #26]
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	769a      	strb	r2, [r3, #26]

}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc90      	pop	{r4, r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	200005b8 	.word	0x200005b8

08002d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d92:	e003      	b.n	8002d9c <LoopCopyDataInit>

08002d94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d9a:	3104      	adds	r1, #4

08002d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d9c:	480b      	ldr	r0, [pc, #44]	; (8002dcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002da0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002da2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002da4:	d3f6      	bcc.n	8002d94 <CopyDataInit>
  ldr  r2, =_sbss
 8002da6:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002da8:	e002      	b.n	8002db0 <LoopFillZerobss>

08002daa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002daa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dac:	f842 3b04 	str.w	r3, [r2], #4

08002db0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002db2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002db4:	d3f9      	bcc.n	8002daa <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002db6:	f000 f883 	bl	8002ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dba:	f000 fa31 	bl	8003220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dbe:	f7ff fa43 	bl	8002248 <main>
  bx  lr    
 8002dc2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dc4:	2001c000 	.word	0x2001c000
  ldr  r3, =_sidata
 8002dc8:	08012e50 	.word	0x08012e50
  ldr  r0, =_sdata
 8002dcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002dd0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002dd4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002dd8:	2000061c 	.word	0x2000061c

08002ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ddc:	e7fe      	b.n	8002ddc <ADC_IRQHandler>

08002dde <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002dee:	e7fe      	b.n	8002dee <HardFault_Handler+0x4>

08002df0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <MemManage_Handler+0x4>

08002df6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002dfa:	e7fe      	b.n	8002dfa <BusFault_Handler+0x4>

08002dfc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <UsageFault_Handler+0x4>

08002e02 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
	...

08002e28 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da0b      	bge.n	8002e54 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <NVIC_SetPriority+0x4c>)
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	3b04      	subs	r3, #4
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002e52:	e009      	b.n	8002e68 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <NVIC_SetPriority+0x50>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	440b      	add	r3, r1
 8002e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00
 8002e78:	e000e100 	.word	0xe000e100

08002e7c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e8a:	d301      	bcc.n	8002e90 <SysTick_Config+0x14>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e011      	b.n	8002eb4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <SysTick_Config+0x40>)
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8002e9c:	210f      	movs	r1, #15
 8002e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea2:	f7ff ffc1 	bl	8002e28 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <SysTick_Config+0x40>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <SysTick_Config+0x40>)
 8002eae:	2207      	movs	r2, #7
 8002eb0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <SystemInit>:
}
#endif /* DATA_IN_ExtSRAM */


void SystemInit(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <SystemInit+0x50>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <SystemInit+0x50>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <SystemInit+0x50>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <SystemInit+0x50>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <SystemInit+0x50>)
 8002edc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <SystemInit+0x50>)
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <SystemInit+0x54>)
 8002eea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <SystemInit+0x50>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <SystemInit+0x50>)
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <SystemInit+0x50>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <SystemInit+0x58>)
 8002f00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f04:	609a      	str	r2, [r3, #8]
#endif
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	24003010 	.word	0x24003010
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <vSystemConfigureGenerator>:



/* Timer Clock is 100 Mhz:
 * For PWM we need 8kHz */
void vSystemConfigureGenerator() {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef init_pwm_pins_portE = { .GPIO_Mode = GPIO_Mode_AF, .GPIO_Speed = GPIO_Speed_50MHz, .GPIO_OType = GPIO_OType_PP, .GPIO_PuPd = GPIO_PuPd_NOPULL, .GPIO_Pin = GPIO_Pin_13
 8002f22:	4a41      	ldr	r2, [pc, #260]	; (8003028 <vSystemConfigureGenerator+0x10c>)
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f2c:	e883 0003 	stmia.w	r3, {r0, r1}
			| GPIO_Pin_12 | GPIO_Pin_11 | GPIO_Pin_10 | GPIO_Pin_9 | GPIO_Pin_8 };

	RCC_APB2PeriphClockCmd(RCC_APB2ENR_TIM1EN, ENABLE);
 8002f30:	2101      	movs	r1, #1
 8002f32:	2001      	movs	r0, #1
 8002f34:	f7fd fc98 	bl	8000868 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOEEN, ENABLE);
 8002f38:	2101      	movs	r1, #1
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f7fd fc58 	bl	80007f0 <RCC_AHB1PeriphClockCmd>

	// Ports initializieren
	GPIO_Init(GPIOE, &init_pwm_pins_portE);
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	4619      	mov	r1, r3
 8002f46:	4839      	ldr	r0, [pc, #228]	; (800302c <vSystemConfigureGenerator+0x110>)
 8002f48:	f7fd fa1e 	bl	8000388 <GPIO_Init>

	GPIO_PinAFConfig(GPIOE, GPIO_PinSource9, GPIO_AF_TIM1);	// 	   pwm 1	U
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2109      	movs	r1, #9
 8002f50:	4836      	ldr	r0, [pc, #216]	; (800302c <vSystemConfigureGenerator+0x110>)
 8002f52:	f7fd faa7 	bl	80004a4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOE, GPIO_PinSource8, GPIO_AF_TIM1); // inv pwm 1
 8002f56:	2201      	movs	r2, #1
 8002f58:	2108      	movs	r1, #8
 8002f5a:	4834      	ldr	r0, [pc, #208]	; (800302c <vSystemConfigureGenerator+0x110>)
 8002f5c:	f7fd faa2 	bl	80004a4 <GPIO_PinAFConfig>

	GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_TIM1); //	    pwm 2	V
 8002f60:	2201      	movs	r2, #1
 8002f62:	210b      	movs	r1, #11
 8002f64:	4831      	ldr	r0, [pc, #196]	; (800302c <vSystemConfigureGenerator+0x110>)
 8002f66:	f7fd fa9d 	bl	80004a4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOE, GPIO_PinSource10, GPIO_AF_TIM1); // inv pwm 2
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	210a      	movs	r1, #10
 8002f6e:	482f      	ldr	r0, [pc, #188]	; (800302c <vSystemConfigureGenerator+0x110>)
 8002f70:	f7fd fa98 	bl	80004a4 <GPIO_PinAFConfig>

	// pwm pins
	GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_TIM1); // 	pwm 3	W
 8002f74:	2201      	movs	r2, #1
 8002f76:	210d      	movs	r1, #13
 8002f78:	482c      	ldr	r0, [pc, #176]	; (800302c <vSystemConfigureGenerator+0x110>)
 8002f7a:	f7fd fa93 	bl	80004a4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOE, GPIO_PinSource12, GPIO_AF_TIM1); // inv pwm 3
 8002f7e:	2201      	movs	r2, #1
 8002f80:	210c      	movs	r1, #12
 8002f82:	482a      	ldr	r0, [pc, #168]	; (800302c <vSystemConfigureGenerator+0x110>)
 8002f84:	f7fd fa8e 	bl	80004a4 <GPIO_PinAFConfig>

	// Beispiele auf http://diller-technologies.de/stm32.html#timer_pwm
	TIM_TimeBaseInitTypeDef TIM_TimeBase_InitStructure;

	TIM_TimeBase_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;		//
 8002f88:	2300      	movs	r3, #0
 8002f8a:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBase_InitStructure.TIM_Period = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
	TIM_TimeBase_InitStructure.TIM_Prescaler = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseInit(TIM1, &TIM_TimeBase_InitStructure);
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4824      	ldr	r0, [pc, #144]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002f9e:	f7fd fcbb 	bl	8000918 <TIM_TimeBaseInit>

	// Set Signal Polarities
	TIM1->CCMR1 = 0;		// Output Mode: Frozen
 8002fa2:	4b23      	ldr	r3, [pc, #140]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	831a      	strh	r2, [r3, #24]
	TIM1->CCMR2 = 0;
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	839a      	strh	r2, [r3, #28]

	TIM1->CCMR1 |= TIM_CCMR1_OC1PE|TIM_CCMR1_OC2PE;		// Synchronize preloading CCR  on the update event
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002fb0:	8b1b      	ldrh	r3, [r3, #24]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002fb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	8313      	strh	r3, [r2, #24]
	TIM1->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fc2:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002fc4:	8b9b      	ldrh	r3, [r3, #28]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	8393      	strh	r3, [r2, #28]

	TIM1->CCER = 0;
 8002fd2:	4b17      	ldr	r3, [pc, #92]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	841a      	strh	r2, [r3, #32]

	/* Der Treiber hat einen Bug und setzt die OutputNState nicht,
	 weil Im Treibercode die Bit-Position von NState gleich der Position von OCNPolarity ist! Dieser Bug kann gef�hrlich auswirken! Platinen schon verreckt) */

	// Die invertierten Signale manuell freischalten.
	TIM1->CCER |=TIM_CCER_CC1E| TIM_CCER_CC2E|TIM_CCER_CC3E|TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE;
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002fda:	8c1b      	ldrh	r3, [r3, #32]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4a14      	ldr	r2, [pc, #80]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002fe0:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8002fe4:	f043 0305 	orr.w	r3, r3, #5
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	8413      	strh	r3, [r2, #32]

	/* Pwm einschalten */
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8002fec:	2101      	movs	r1, #1
 8002fee:	4810      	ldr	r0, [pc, #64]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002ff0:	f7fd fd1b 	bl	8000a2a <TIM_CtrlPWMOutputs>

	TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	480e      	ldr	r0, [pc, #56]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8002ff8:	f7fd fd5f 	bl	8000aba <TIM_ClearITPendingBit>

	// PWM arbeitet genauer mit Update Interrupt als mit CC, CC braucht anderen Ansatz!
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	2101      	movs	r1, #1
 8003000:	480b      	ldr	r0, [pc, #44]	; (8003030 <vSystemConfigureGenerator+0x114>)
 8003002:	f7fd fd37 	bl	8000a74 <TIM_ITConfig>

	// TIM 1 update interrupt tritt auf wenn Z�hler durchgez�hlt ist, aber die Ausf�hrung in main zu haben reichts aus.
	NVIC_InitTypeDef NVIC_InitStruct;/**/
	NVIC_InitStruct.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn;
 8003006:	2319      	movs	r3, #25
 8003008:	703b      	strb	r3, [r7, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800300a:	2301      	movs	r3, #1
 800300c:	70fb      	strb	r3, [r7, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
 8003012:	2301      	movs	r3, #1
 8003014:	70bb      	strb	r3, [r7, #2]
	NVIC_Init(&NVIC_InitStruct);
 8003016:	463b      	mov	r3, r7
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd f8d3 	bl	80001c4 <NVIC_Init>
	//NVIC_InitStruct.NVIC_IRQChannel = TIM1_CC_IRQn;
	//NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	//NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
	//NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
	//NVIC_Init(&NVIC_InitStruct);
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	08003438 	.word	0x08003438
 800302c:	40021000 	.word	0x40021000
 8003030:	40010000 	.word	0x40010000

08003034 <vSystemConfigureUart>:

	GPIO_ResetBits(GPIOE, GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13);
	GPIO_SetBits(GPIOE, GPIO_Pin_8 | GPIO_Pin_10 | GPIO_Pin_12);
}

void vSystemConfigureUart() {
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0

	/* UART */
	GPIO_InitTypeDef uart_pins;

	/* Tx Rx */
	uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 800303a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800303e:	61bb      	str	r3, [r7, #24]
	uart_pins.GPIO_Speed = GPIO_Speed_100MHz;
 8003040:	2303      	movs	r3, #3
 8003042:	777b      	strb	r3, [r7, #29]
	uart_pins.GPIO_Mode = GPIO_Mode_AF;
 8003044:	2302      	movs	r3, #2
 8003046:	773b      	strb	r3, [r7, #28]
	uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 8003048:	2301      	movs	r3, #1
 800304a:	77fb      	strb	r3, [r7, #31]
	uart_pins.GPIO_OType = GPIO_OType_OD;
 800304c:	2301      	movs	r3, #1
 800304e:	77bb      	strb	r3, [r7, #30]

	RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIODEN, ENABLE);
 8003050:	2101      	movs	r1, #1
 8003052:	2008      	movs	r0, #8
 8003054:	f7fd fbcc 	bl	80007f0 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003058:	2101      	movs	r1, #1
 800305a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800305e:	f7fd fbe5 	bl	800082c <RCC_APB1PeriphClockCmd>

	GPIO_Init(GPIOD, &uart_pins);
 8003062:	f107 0318 	add.w	r3, r7, #24
 8003066:	4619      	mov	r1, r3
 8003068:	481e      	ldr	r0, [pc, #120]	; (80030e4 <vSystemConfigureUart+0xb0>)
 800306a:	f7fd f98d 	bl	8000388 <GPIO_Init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOGEN, ENABLE);
 800306e:	2101      	movs	r1, #1
 8003070:	2040      	movs	r0, #64	; 0x40
 8003072:	f7fd fbbd 	bl	80007f0 <RCC_AHB1PeriphClockCmd>

	/* Die Pins auf UART umschalten*/
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3);
 8003076:	2207      	movs	r2, #7
 8003078:	2108      	movs	r1, #8
 800307a:	481a      	ldr	r0, [pc, #104]	; (80030e4 <vSystemConfigureUart+0xb0>)
 800307c:	f7fd fa12 	bl	80004a4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);
 8003080:	2207      	movs	r2, #7
 8003082:	2109      	movs	r1, #9
 8003084:	4817      	ldr	r0, [pc, #92]	; (80030e4 <vSystemConfigureUart+0xb0>)
 8003086:	f7fd fa0d 	bl	80004a4 <GPIO_PinAFConfig>

	USART_InitTypeDef usart2_init_struct;
	usart2_init_struct.USART_BaudRate = 115200;					// 115200
 800308a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800308e:	60bb      	str	r3, [r7, #8]
	usart2_init_struct.USART_WordLength = USART_WordLength_8b;
 8003090:	2300      	movs	r3, #0
 8003092:	81bb      	strh	r3, [r7, #12]
	usart2_init_struct.USART_StopBits = USART_StopBits_1;
 8003094:	2300      	movs	r3, #0
 8003096:	81fb      	strh	r3, [r7, #14]
	usart2_init_struct.USART_Parity = USART_Parity_No;
 8003098:	2300      	movs	r3, #0
 800309a:	823b      	strh	r3, [r7, #16]
	usart2_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800309c:	230c      	movs	r3, #12
 800309e:	827b      	strh	r3, [r7, #18]
	usart2_init_struct.USART_HardwareFlowControl =
 80030a0:	2300      	movs	r3, #0
 80030a2:	82bb      	strh	r3, [r7, #20]
	USART_HardwareFlowControl_None;

	// UART freischalten
	USART_Cmd(USART3, ENABLE);
 80030a4:	2101      	movs	r1, #1
 80030a6:	4810      	ldr	r0, [pc, #64]	; (80030e8 <vSystemConfigureUart+0xb4>)
 80030a8:	f7fd fdd2 	bl	8000c50 <USART_Cmd>
	USART_Init(USART3, &usart2_init_struct);
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	4619      	mov	r1, r3
 80030b2:	480d      	ldr	r0, [pc, #52]	; (80030e8 <vSystemConfigureUart+0xb4>)
 80030b4:	f7fd fd12 	bl	8000adc <USART_Init>

	// RXNE Interrupt erlauben
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 80030b8:	2201      	movs	r2, #1
 80030ba:	f240 5125 	movw	r1, #1317	; 0x525
 80030be:	480a      	ldr	r0, [pc, #40]	; (80030e8 <vSystemConfigureUart+0xb4>)
 80030c0:	f7fd fde5 	bl	8000c8e <USART_ITConfig>

	// UART interrupt, damit vom PC aus die Frequenz verstellt werden kann
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = USART3_IRQn;
 80030c4:	2327      	movs	r3, #39	; 0x27
 80030c6:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
 80030d0:	2301      	movs	r3, #1
 80030d2:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStruct);
 80030d4:	1d3b      	adds	r3, r7, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd f874 	bl	80001c4 <NVIC_Init>
}
 80030dc:	bf00      	nop
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40020c00 	.word	0x40020c00
 80030e8:	40004800 	.word	0x40004800

080030ec <vSystemConfigureMisc>:

void vSystemConfigureMisc() {
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <vSystemConfigureMisc+0x18>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a03      	ldr	r2, [pc, #12]	; (8003104 <vSystemConfigureMisc+0x18>)
 80030f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030fa:	6093      	str	r3, [r2, #8]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	e0042000 	.word	0xe0042000

08003108 <vSystemSetTicktime>:

void vSystemSetTicktime(uint32_t ui32freq) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	RCC_GetClocksFreq(&stcClockFrequencies);
 8003110:	4807      	ldr	r0, [pc, #28]	; (8003130 <vSystemSetTicktime+0x28>)
 8003112:	f7fd fabf 	bl	8000694 <RCC_GetClocksFreq>
	SysTick_Config(stcClockFrequencies.HCLK_Frequency/ui32freq);
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <vSystemSetTicktime+0x28>)
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff feab 	bl	8002e7c <SysTick_Config>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200005e4 	.word	0x200005e4

08003134 <vSystemConfigureClocks>:

void vSystemConfigureClocks() {
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af02      	add	r7, sp, #8
	// Enable External Crystal
	RCC_HSEConfig(RCC_HSE_ON);
 800313a:	2001      	movs	r0, #1
 800313c:	f7fd f9fa 	bl	8000534 <RCC_HSEConfig>
	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET) {
 8003140:	bf00      	nop
 8003142:	2031      	movs	r0, #49	; 0x31
 8003144:	f7fd fbae 	bl	80008a4 <RCC_GetFlagStatus>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f9      	beq.n	8003142 <vSystemConfigureClocks+0xe>
	}

	// 100 MHz mit 8Mhz Quarz
	// • f(VCO clock) = f(PLL clock input) × (PLLN / PLLM)
	// • f(PLL general clock output) = f(VCO clock) / PLLP
	RCC_PLLConfig(RCC_PLLCFGR_PLLSRC_HSE, 2, 50, 2, 2);	//###RCC_PLLConfig(RCC_PLLCFGR_PLLSRC_HSE, PLLM, PLLN, PLLP, PLLQ2)
 800314e:	2302      	movs	r3, #2
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2302      	movs	r3, #2
 8003154:	2232      	movs	r2, #50	; 0x32
 8003156:	2102      	movs	r1, #2
 8003158:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800315c:	f7fd f9fc 	bl	8000558 <RCC_PLLConfig>
	RCC_PLLCmd(ENABLE);
 8003160:	2001      	movs	r0, #1
 8003162:	f7fd fa17 	bl	8000594 <RCC_PLLCmd>
	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) {}
 8003166:	bf00      	nop
 8003168:	2039      	movs	r0, #57	; 0x39
 800316a:	f7fd fb9b 	bl	80008a4 <RCC_GetFlagStatus>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f9      	beq.n	8003168 <vSystemConfigureClocks+0x34>

	// Flash Konfiguration und Clocks müssen von dem Umsteigen auf PLL erstellt werden
	FLASH_DataCacheCmd(ENABLE);
 8003174:	2001      	movs	r0, #1
 8003176:	f7fd f8eb 	bl	8000350 <FLASH_DataCacheCmd>
	FLASH_InstructionCacheCmd(ENABLE);
 800317a:	2001      	movs	r0, #1
 800317c:	f7fd f8cc 	bl	8000318 <FLASH_InstructionCacheCmd>
	FLASH_PrefetchBufferCmd(ENABLE);
 8003180:	2001      	movs	r0, #1
 8003182:	f7fd f8ad 	bl	80002e0 <FLASH_PrefetchBufferCmd>
	FLASH_SetLatency(FLASH_Latency_3);
 8003186:	2003      	movs	r0, #3
 8003188:	f7fd f89a 	bl	80002c0 <FLASH_SetLatency>

	RCC_HCLKConfig(RCC_SYSCLK_Div1);	// 100 Mhz
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd fa2d 	bl	80005ec <RCC_HCLKConfig>
	RCC_PCLK1Config(RCC_HCLK_Div4);		// 25 Mhz
 8003192:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003196:	f7fd fa45 	bl	8000624 <RCC_PCLK1Config>
	RCC_PCLK2Config(RCC_HCLK_Div2);		// 50 Mhz
 800319a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800319e:	f7fd fa5d 	bl	800065c <RCC_PCLK2Config>

	// Ab hier SYSCLK 100 MHz
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80031a2:	2002      	movs	r0, #2
 80031a4:	f7fd fa06 	bl	80005b4 <RCC_SYSCLKConfig>

	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
 80031a8:	f06f 0004 	mvn.w	r0, #4
 80031ac:	f7fd f86c 	bl	8000288 <SysTick_CLKSourceConfig>

	 //RCC_MCO1Config(RCC_MCO1Source_HSI, RCC_MCO1Div_1);		// Internal Clock
	 RCC_MCO1Config(RCC_MCO1Source_PLLCLK, RCC_MCO1Div_1);		// External Clock HSE

	 */
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <vInitQueues>:
// Should be 2^x
static uint8_t arrui8QueueBufferRx[RX_QUEUE_LENGTH];
static uint8_t arrui8QueueBufferTx[TX_QUEUE_LENGTH];


void vInitQueues(){
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
	dInitQueue(stcQueueRx, arrui8QueueBufferRx, sizeof(arrui8QueueBufferRx));	// Queues
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <vInitQueues+0x4c>)
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <vInitQueues+0x50>)
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <vInitQueues+0x4c>)
 80031c4:	22ff      	movs	r2, #255	; 0xff
 80031c6:	809a      	strh	r2, [r3, #4]
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <vInitQueues+0x4c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	811a      	strh	r2, [r3, #8]
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <vInitQueues+0x4c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	815a      	strh	r2, [r3, #10]
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <vInitQueues+0x4c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	80da      	strh	r2, [r3, #6]
	dInitQueue(stcQueueTx, arrui8QueueBufferTx, sizeof(arrui8QueueBufferTx));
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <vInitQueues+0x54>)
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <vInitQueues+0x58>)
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <vInitQueues+0x54>)
 80031e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e6:	809a      	strh	r2, [r3, #4]
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <vInitQueues+0x54>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	811a      	strh	r2, [r3, #8]
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <vInitQueues+0x54>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	815a      	strh	r2, [r3, #10]
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <vInitQueues+0x54>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	80da      	strh	r2, [r3, #6]
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	200005f4 	.word	0x200005f4
 8003208:	200000b0 	.word	0x200000b0
 800320c:	20000600 	.word	0x20000600
 8003210:	200001b0 	.word	0x200001b0

08003214 <__errno>:
 8003214:	4b01      	ldr	r3, [pc, #4]	; (800321c <__errno+0x8>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000010 	.word	0x20000010

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	2600      	movs	r6, #0
 8003224:	4d0c      	ldr	r5, [pc, #48]	; (8003258 <__libc_init_array+0x38>)
 8003226:	4c0d      	ldr	r4, [pc, #52]	; (800325c <__libc_init_array+0x3c>)
 8003228:	1b64      	subs	r4, r4, r5
 800322a:	10a4      	asrs	r4, r4, #2
 800322c:	42a6      	cmp	r6, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	f000 f8f6 	bl	8003420 <_init>
 8003234:	2600      	movs	r6, #0
 8003236:	4d0a      	ldr	r5, [pc, #40]	; (8003260 <__libc_init_array+0x40>)
 8003238:	4c0a      	ldr	r4, [pc, #40]	; (8003264 <__libc_init_array+0x44>)
 800323a:	1b64      	subs	r4, r4, r5
 800323c:	10a4      	asrs	r4, r4, #2
 800323e:	42a6      	cmp	r6, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	f855 3b04 	ldr.w	r3, [r5], #4
 8003248:	4798      	blx	r3
 800324a:	3601      	adds	r6, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003252:	4798      	blx	r3
 8003254:	3601      	adds	r6, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	08012e48 	.word	0x08012e48
 800325c:	08012e48 	.word	0x08012e48
 8003260:	08012e48 	.word	0x08012e48
 8003264:	08012e4c 	.word	0x08012e4c

08003268 <malloc>:
 8003268:	4b02      	ldr	r3, [pc, #8]	; (8003274 <malloc+0xc>)
 800326a:	4601      	mov	r1, r0
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	f000 b85f 	b.w	8003330 <_malloc_r>
 8003272:	bf00      	nop
 8003274:	20000010 	.word	0x20000010

08003278 <free>:
 8003278:	4b02      	ldr	r3, [pc, #8]	; (8003284 <free+0xc>)
 800327a:	4601      	mov	r1, r0
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f000 b80b 	b.w	8003298 <_free_r>
 8003282:	bf00      	nop
 8003284:	20000010 	.word	0x20000010

08003288 <memset>:
 8003288:	4603      	mov	r3, r0
 800328a:	4402      	add	r2, r0
 800328c:	4293      	cmp	r3, r2
 800328e:	d100      	bne.n	8003292 <memset+0xa>
 8003290:	4770      	bx	lr
 8003292:	f803 1b01 	strb.w	r1, [r3], #1
 8003296:	e7f9      	b.n	800328c <memset+0x4>

08003298 <_free_r>:
 8003298:	b538      	push	{r3, r4, r5, lr}
 800329a:	4605      	mov	r5, r0
 800329c:	2900      	cmp	r1, #0
 800329e:	d043      	beq.n	8003328 <_free_r+0x90>
 80032a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032a4:	1f0c      	subs	r4, r1, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bfb8      	it	lt
 80032aa:	18e4      	addlt	r4, r4, r3
 80032ac:	f000 f8aa 	bl	8003404 <__malloc_lock>
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <_free_r+0x94>)
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	4610      	mov	r0, r2
 80032b6:	b933      	cbnz	r3, 80032c6 <_free_r+0x2e>
 80032b8:	6063      	str	r3, [r4, #4]
 80032ba:	6014      	str	r4, [r2, #0]
 80032bc:	4628      	mov	r0, r5
 80032be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032c2:	f000 b8a5 	b.w	8003410 <__malloc_unlock>
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	d90a      	bls.n	80032e0 <_free_r+0x48>
 80032ca:	6821      	ldr	r1, [r4, #0]
 80032cc:	1862      	adds	r2, r4, r1
 80032ce:	4293      	cmp	r3, r2
 80032d0:	bf01      	itttt	eq
 80032d2:	681a      	ldreq	r2, [r3, #0]
 80032d4:	685b      	ldreq	r3, [r3, #4]
 80032d6:	1852      	addeq	r2, r2, r1
 80032d8:	6022      	streq	r2, [r4, #0]
 80032da:	6063      	str	r3, [r4, #4]
 80032dc:	6004      	str	r4, [r0, #0]
 80032de:	e7ed      	b.n	80032bc <_free_r+0x24>
 80032e0:	461a      	mov	r2, r3
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	b10b      	cbz	r3, 80032ea <_free_r+0x52>
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d9fa      	bls.n	80032e0 <_free_r+0x48>
 80032ea:	6811      	ldr	r1, [r2, #0]
 80032ec:	1850      	adds	r0, r2, r1
 80032ee:	42a0      	cmp	r0, r4
 80032f0:	d10b      	bne.n	800330a <_free_r+0x72>
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	4401      	add	r1, r0
 80032f6:	1850      	adds	r0, r2, r1
 80032f8:	4283      	cmp	r3, r0
 80032fa:	6011      	str	r1, [r2, #0]
 80032fc:	d1de      	bne.n	80032bc <_free_r+0x24>
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4401      	add	r1, r0
 8003304:	6011      	str	r1, [r2, #0]
 8003306:	6053      	str	r3, [r2, #4]
 8003308:	e7d8      	b.n	80032bc <_free_r+0x24>
 800330a:	d902      	bls.n	8003312 <_free_r+0x7a>
 800330c:	230c      	movs	r3, #12
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	e7d4      	b.n	80032bc <_free_r+0x24>
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	1821      	adds	r1, r4, r0
 8003316:	428b      	cmp	r3, r1
 8003318:	bf01      	itttt	eq
 800331a:	6819      	ldreq	r1, [r3, #0]
 800331c:	685b      	ldreq	r3, [r3, #4]
 800331e:	1809      	addeq	r1, r1, r0
 8003320:	6021      	streq	r1, [r4, #0]
 8003322:	6063      	str	r3, [r4, #4]
 8003324:	6054      	str	r4, [r2, #4]
 8003326:	e7c9      	b.n	80032bc <_free_r+0x24>
 8003328:	bd38      	pop	{r3, r4, r5, pc}
 800332a:	bf00      	nop
 800332c:	200005b0 	.word	0x200005b0

08003330 <_malloc_r>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	1ccd      	adds	r5, r1, #3
 8003334:	f025 0503 	bic.w	r5, r5, #3
 8003338:	3508      	adds	r5, #8
 800333a:	2d0c      	cmp	r5, #12
 800333c:	bf38      	it	cc
 800333e:	250c      	movcc	r5, #12
 8003340:	2d00      	cmp	r5, #0
 8003342:	4606      	mov	r6, r0
 8003344:	db01      	blt.n	800334a <_malloc_r+0x1a>
 8003346:	42a9      	cmp	r1, r5
 8003348:	d903      	bls.n	8003352 <_malloc_r+0x22>
 800334a:	230c      	movs	r3, #12
 800334c:	6033      	str	r3, [r6, #0]
 800334e:	2000      	movs	r0, #0
 8003350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003352:	f000 f857 	bl	8003404 <__malloc_lock>
 8003356:	4921      	ldr	r1, [pc, #132]	; (80033dc <_malloc_r+0xac>)
 8003358:	680a      	ldr	r2, [r1, #0]
 800335a:	4614      	mov	r4, r2
 800335c:	b99c      	cbnz	r4, 8003386 <_malloc_r+0x56>
 800335e:	4f20      	ldr	r7, [pc, #128]	; (80033e0 <_malloc_r+0xb0>)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b923      	cbnz	r3, 800336e <_malloc_r+0x3e>
 8003364:	4621      	mov	r1, r4
 8003366:	4630      	mov	r0, r6
 8003368:	f000 f83c 	bl	80033e4 <_sbrk_r>
 800336c:	6038      	str	r0, [r7, #0]
 800336e:	4629      	mov	r1, r5
 8003370:	4630      	mov	r0, r6
 8003372:	f000 f837 	bl	80033e4 <_sbrk_r>
 8003376:	1c43      	adds	r3, r0, #1
 8003378:	d123      	bne.n	80033c2 <_malloc_r+0x92>
 800337a:	230c      	movs	r3, #12
 800337c:	4630      	mov	r0, r6
 800337e:	6033      	str	r3, [r6, #0]
 8003380:	f000 f846 	bl	8003410 <__malloc_unlock>
 8003384:	e7e3      	b.n	800334e <_malloc_r+0x1e>
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	1b5b      	subs	r3, r3, r5
 800338a:	d417      	bmi.n	80033bc <_malloc_r+0x8c>
 800338c:	2b0b      	cmp	r3, #11
 800338e:	d903      	bls.n	8003398 <_malloc_r+0x68>
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	441c      	add	r4, r3
 8003394:	6025      	str	r5, [r4, #0]
 8003396:	e004      	b.n	80033a2 <_malloc_r+0x72>
 8003398:	6863      	ldr	r3, [r4, #4]
 800339a:	42a2      	cmp	r2, r4
 800339c:	bf0c      	ite	eq
 800339e:	600b      	streq	r3, [r1, #0]
 80033a0:	6053      	strne	r3, [r2, #4]
 80033a2:	4630      	mov	r0, r6
 80033a4:	f000 f834 	bl	8003410 <__malloc_unlock>
 80033a8:	f104 000b 	add.w	r0, r4, #11
 80033ac:	1d23      	adds	r3, r4, #4
 80033ae:	f020 0007 	bic.w	r0, r0, #7
 80033b2:	1ac2      	subs	r2, r0, r3
 80033b4:	d0cc      	beq.n	8003350 <_malloc_r+0x20>
 80033b6:	1a1b      	subs	r3, r3, r0
 80033b8:	50a3      	str	r3, [r4, r2]
 80033ba:	e7c9      	b.n	8003350 <_malloc_r+0x20>
 80033bc:	4622      	mov	r2, r4
 80033be:	6864      	ldr	r4, [r4, #4]
 80033c0:	e7cc      	b.n	800335c <_malloc_r+0x2c>
 80033c2:	1cc4      	adds	r4, r0, #3
 80033c4:	f024 0403 	bic.w	r4, r4, #3
 80033c8:	42a0      	cmp	r0, r4
 80033ca:	d0e3      	beq.n	8003394 <_malloc_r+0x64>
 80033cc:	1a21      	subs	r1, r4, r0
 80033ce:	4630      	mov	r0, r6
 80033d0:	f000 f808 	bl	80033e4 <_sbrk_r>
 80033d4:	3001      	adds	r0, #1
 80033d6:	d1dd      	bne.n	8003394 <_malloc_r+0x64>
 80033d8:	e7cf      	b.n	800337a <_malloc_r+0x4a>
 80033da:	bf00      	nop
 80033dc:	200005b0 	.word	0x200005b0
 80033e0:	200005b4 	.word	0x200005b4

080033e4 <_sbrk_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	2300      	movs	r3, #0
 80033e8:	4d05      	ldr	r5, [pc, #20]	; (8003400 <_sbrk_r+0x1c>)
 80033ea:	4604      	mov	r4, r0
 80033ec:	4608      	mov	r0, r1
 80033ee:	602b      	str	r3, [r5, #0]
 80033f0:	f7fd fc94 	bl	8000d1c <_sbrk>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d102      	bne.n	80033fe <_sbrk_r+0x1a>
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	b103      	cbz	r3, 80033fe <_sbrk_r+0x1a>
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	2000060c 	.word	0x2000060c

08003404 <__malloc_lock>:
 8003404:	4801      	ldr	r0, [pc, #4]	; (800340c <__malloc_lock+0x8>)
 8003406:	f000 b809 	b.w	800341c <__retarget_lock_acquire_recursive>
 800340a:	bf00      	nop
 800340c:	20000614 	.word	0x20000614

08003410 <__malloc_unlock>:
 8003410:	4801      	ldr	r0, [pc, #4]	; (8003418 <__malloc_unlock+0x8>)
 8003412:	f000 b804 	b.w	800341e <__retarget_lock_release_recursive>
 8003416:	bf00      	nop
 8003418:	20000614 	.word	0x20000614

0800341c <__retarget_lock_acquire_recursive>:
 800341c:	4770      	bx	lr

0800341e <__retarget_lock_release_recursive>:
 800341e:	4770      	bx	lr

08003420 <_init>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr

0800342c <_fini>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	bf00      	nop
 8003430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003432:	bc08      	pop	{r3}
 8003434:	469e      	mov	lr, r3
 8003436:	4770      	bx	lr
